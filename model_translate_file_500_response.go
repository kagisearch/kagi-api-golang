/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateFile500Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateFile500Response{}

// TranslateFile500Response struct for TranslateFile500Response
type TranslateFile500Response struct {
	Error *string `json:"error,omitempty"`
}

// NewTranslateFile500Response instantiates a new TranslateFile500Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateFile500Response() *TranslateFile500Response {
	this := TranslateFile500Response{}
	return &this
}

// NewTranslateFile500ResponseWithDefaults instantiates a new TranslateFile500Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateFile500ResponseWithDefaults() *TranslateFile500Response {
	this := TranslateFile500Response{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *TranslateFile500Response) GetError() string {
	if o == nil || IsNil(o.Error) {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateFile500Response) GetErrorOk() (*string, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *TranslateFile500Response) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *TranslateFile500Response) SetError(v string) {
	o.Error = &v
}

func (o TranslateFile500Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateFile500Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	return toSerialize, nil
}

type NullableTranslateFile500Response struct {
	value *TranslateFile500Response
	isSet bool
}

func (v NullableTranslateFile500Response) Get() *TranslateFile500Response {
	return v.value
}

func (v *NullableTranslateFile500Response) Set(val *TranslateFile500Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateFile500Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateFile500Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateFile500Response(val *TranslateFile500Response) *NullableTranslateFile500Response {
	return &NullableTranslateFile500Response{value: val, isSet: true}
}

func (v NullableTranslateFile500Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateFile500Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


