/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateDictionary200ResponseDefinition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateDictionary200ResponseDefinition{}

// TranslateDictionary200ResponseDefinition Structured definition of the word
type TranslateDictionary200ResponseDefinition struct {
	// The word being defined (remains in word_language)
	Word *string `json:"word,omitempty"`
	PrimaryMeaning *TranslateDictionary200ResponseDefinitionPrimaryMeaning `json:"primary_meaning,omitempty"`
	// Secondary or less common meanings
	SecondaryMeanings []TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner `json:"secondary_meanings,omitempty"`
	// Example sentences showing usage (remains in word_language, but includes translations in parentheses when word_language differs from definition_language)
	Examples []string `json:"examples,omitempty"`
	// Phonetic pronunciation of the word in its original language (if available)
	Pronunciation *string `json:"pronunciation,omitempty"`
	// Information about word origin (translated to definition_language if available)
	Etymology *string `json:"etymology,omitempty"`
	// Brief usage notes, cultural context, or helpful tips for language learners (translated to definition_language)
	Notes *string `json:"notes,omitempty"`
	// Optional usage trend indicator. Always in English as an enum value. Only provided when trend data is clear and meaningful.
	TemporalTrend *string `json:"temporal_trend,omitempty"`
	// Grammatical gender for nouns in languages that have gender. Always in English as an enum value. Only included for nouns in gendered languages.
	Gender *string `json:"gender,omitempty"`
	// Plural form of the word (remains in word_language). Only included for irregular or non-standard plurals.
	Plural *string `json:"plural,omitempty"`
	// Brief notes about verb conjugation irregularities (remains in word_language). Only included for verbs with notable irregularities.
	ConjugationNotes *string `json:"conjugation_notes,omitempty"`
	// Related words from the same root or word family (remains in word_language)
	RelatedWords []string `json:"related_words,omitempty"`
}

// NewTranslateDictionary200ResponseDefinition instantiates a new TranslateDictionary200ResponseDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDictionary200ResponseDefinition() *TranslateDictionary200ResponseDefinition {
	this := TranslateDictionary200ResponseDefinition{}
	return &this
}

// NewTranslateDictionary200ResponseDefinitionWithDefaults instantiates a new TranslateDictionary200ResponseDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDictionary200ResponseDefinitionWithDefaults() *TranslateDictionary200ResponseDefinition {
	this := TranslateDictionary200ResponseDefinition{}
	return &this
}

// GetWord returns the Word field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetWord() string {
	if o == nil || IsNil(o.Word) {
		var ret string
		return ret
	}
	return *o.Word
}

// GetWordOk returns a tuple with the Word field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetWordOk() (*string, bool) {
	if o == nil || IsNil(o.Word) {
		return nil, false
	}
	return o.Word, true
}

// HasWord returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasWord() bool {
	if o != nil && !IsNil(o.Word) {
		return true
	}

	return false
}

// SetWord gets a reference to the given string and assigns it to the Word field.
func (o *TranslateDictionary200ResponseDefinition) SetWord(v string) {
	o.Word = &v
}

// GetPrimaryMeaning returns the PrimaryMeaning field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetPrimaryMeaning() TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	if o == nil || IsNil(o.PrimaryMeaning) {
		var ret TranslateDictionary200ResponseDefinitionPrimaryMeaning
		return ret
	}
	return *o.PrimaryMeaning
}

// GetPrimaryMeaningOk returns a tuple with the PrimaryMeaning field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetPrimaryMeaningOk() (*TranslateDictionary200ResponseDefinitionPrimaryMeaning, bool) {
	if o == nil || IsNil(o.PrimaryMeaning) {
		return nil, false
	}
	return o.PrimaryMeaning, true
}

// HasPrimaryMeaning returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasPrimaryMeaning() bool {
	if o != nil && !IsNil(o.PrimaryMeaning) {
		return true
	}

	return false
}

// SetPrimaryMeaning gets a reference to the given TranslateDictionary200ResponseDefinitionPrimaryMeaning and assigns it to the PrimaryMeaning field.
func (o *TranslateDictionary200ResponseDefinition) SetPrimaryMeaning(v TranslateDictionary200ResponseDefinitionPrimaryMeaning) {
	o.PrimaryMeaning = &v
}

// GetSecondaryMeanings returns the SecondaryMeanings field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetSecondaryMeanings() []TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner {
	if o == nil || IsNil(o.SecondaryMeanings) {
		var ret []TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner
		return ret
	}
	return o.SecondaryMeanings
}

// GetSecondaryMeaningsOk returns a tuple with the SecondaryMeanings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetSecondaryMeaningsOk() ([]TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner, bool) {
	if o == nil || IsNil(o.SecondaryMeanings) {
		return nil, false
	}
	return o.SecondaryMeanings, true
}

// HasSecondaryMeanings returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasSecondaryMeanings() bool {
	if o != nil && !IsNil(o.SecondaryMeanings) {
		return true
	}

	return false
}

// SetSecondaryMeanings gets a reference to the given []TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner and assigns it to the SecondaryMeanings field.
func (o *TranslateDictionary200ResponseDefinition) SetSecondaryMeanings(v []TranslateDictionary200ResponseDefinitionSecondaryMeaningsInner) {
	o.SecondaryMeanings = v
}

// GetExamples returns the Examples field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetExamples() []string {
	if o == nil || IsNil(o.Examples) {
		var ret []string
		return ret
	}
	return o.Examples
}

// GetExamplesOk returns a tuple with the Examples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetExamplesOk() ([]string, bool) {
	if o == nil || IsNil(o.Examples) {
		return nil, false
	}
	return o.Examples, true
}

// HasExamples returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasExamples() bool {
	if o != nil && !IsNil(o.Examples) {
		return true
	}

	return false
}

// SetExamples gets a reference to the given []string and assigns it to the Examples field.
func (o *TranslateDictionary200ResponseDefinition) SetExamples(v []string) {
	o.Examples = v
}

// GetPronunciation returns the Pronunciation field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetPronunciation() string {
	if o == nil || IsNil(o.Pronunciation) {
		var ret string
		return ret
	}
	return *o.Pronunciation
}

// GetPronunciationOk returns a tuple with the Pronunciation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetPronunciationOk() (*string, bool) {
	if o == nil || IsNil(o.Pronunciation) {
		return nil, false
	}
	return o.Pronunciation, true
}

// HasPronunciation returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasPronunciation() bool {
	if o != nil && !IsNil(o.Pronunciation) {
		return true
	}

	return false
}

// SetPronunciation gets a reference to the given string and assigns it to the Pronunciation field.
func (o *TranslateDictionary200ResponseDefinition) SetPronunciation(v string) {
	o.Pronunciation = &v
}

// GetEtymology returns the Etymology field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetEtymology() string {
	if o == nil || IsNil(o.Etymology) {
		var ret string
		return ret
	}
	return *o.Etymology
}

// GetEtymologyOk returns a tuple with the Etymology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetEtymologyOk() (*string, bool) {
	if o == nil || IsNil(o.Etymology) {
		return nil, false
	}
	return o.Etymology, true
}

// HasEtymology returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasEtymology() bool {
	if o != nil && !IsNil(o.Etymology) {
		return true
	}

	return false
}

// SetEtymology gets a reference to the given string and assigns it to the Etymology field.
func (o *TranslateDictionary200ResponseDefinition) SetEtymology(v string) {
	o.Etymology = &v
}

// GetNotes returns the Notes field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetNotes() string {
	if o == nil || IsNil(o.Notes) {
		var ret string
		return ret
	}
	return *o.Notes
}

// GetNotesOk returns a tuple with the Notes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetNotesOk() (*string, bool) {
	if o == nil || IsNil(o.Notes) {
		return nil, false
	}
	return o.Notes, true
}

// HasNotes returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasNotes() bool {
	if o != nil && !IsNil(o.Notes) {
		return true
	}

	return false
}

// SetNotes gets a reference to the given string and assigns it to the Notes field.
func (o *TranslateDictionary200ResponseDefinition) SetNotes(v string) {
	o.Notes = &v
}

// GetTemporalTrend returns the TemporalTrend field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetTemporalTrend() string {
	if o == nil || IsNil(o.TemporalTrend) {
		var ret string
		return ret
	}
	return *o.TemporalTrend
}

// GetTemporalTrendOk returns a tuple with the TemporalTrend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetTemporalTrendOk() (*string, bool) {
	if o == nil || IsNil(o.TemporalTrend) {
		return nil, false
	}
	return o.TemporalTrend, true
}

// HasTemporalTrend returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasTemporalTrend() bool {
	if o != nil && !IsNil(o.TemporalTrend) {
		return true
	}

	return false
}

// SetTemporalTrend gets a reference to the given string and assigns it to the TemporalTrend field.
func (o *TranslateDictionary200ResponseDefinition) SetTemporalTrend(v string) {
	o.TemporalTrend = &v
}

// GetGender returns the Gender field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetGender() string {
	if o == nil || IsNil(o.Gender) {
		var ret string
		return ret
	}
	return *o.Gender
}

// GetGenderOk returns a tuple with the Gender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetGenderOk() (*string, bool) {
	if o == nil || IsNil(o.Gender) {
		return nil, false
	}
	return o.Gender, true
}

// HasGender returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasGender() bool {
	if o != nil && !IsNil(o.Gender) {
		return true
	}

	return false
}

// SetGender gets a reference to the given string and assigns it to the Gender field.
func (o *TranslateDictionary200ResponseDefinition) SetGender(v string) {
	o.Gender = &v
}

// GetPlural returns the Plural field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetPlural() string {
	if o == nil || IsNil(o.Plural) {
		var ret string
		return ret
	}
	return *o.Plural
}

// GetPluralOk returns a tuple with the Plural field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetPluralOk() (*string, bool) {
	if o == nil || IsNil(o.Plural) {
		return nil, false
	}
	return o.Plural, true
}

// HasPlural returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasPlural() bool {
	if o != nil && !IsNil(o.Plural) {
		return true
	}

	return false
}

// SetPlural gets a reference to the given string and assigns it to the Plural field.
func (o *TranslateDictionary200ResponseDefinition) SetPlural(v string) {
	o.Plural = &v
}

// GetConjugationNotes returns the ConjugationNotes field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetConjugationNotes() string {
	if o == nil || IsNil(o.ConjugationNotes) {
		var ret string
		return ret
	}
	return *o.ConjugationNotes
}

// GetConjugationNotesOk returns a tuple with the ConjugationNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetConjugationNotesOk() (*string, bool) {
	if o == nil || IsNil(o.ConjugationNotes) {
		return nil, false
	}
	return o.ConjugationNotes, true
}

// HasConjugationNotes returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasConjugationNotes() bool {
	if o != nil && !IsNil(o.ConjugationNotes) {
		return true
	}

	return false
}

// SetConjugationNotes gets a reference to the given string and assigns it to the ConjugationNotes field.
func (o *TranslateDictionary200ResponseDefinition) SetConjugationNotes(v string) {
	o.ConjugationNotes = &v
}

// GetRelatedWords returns the RelatedWords field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinition) GetRelatedWords() []string {
	if o == nil || IsNil(o.RelatedWords) {
		var ret []string
		return ret
	}
	return o.RelatedWords
}

// GetRelatedWordsOk returns a tuple with the RelatedWords field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinition) GetRelatedWordsOk() ([]string, bool) {
	if o == nil || IsNil(o.RelatedWords) {
		return nil, false
	}
	return o.RelatedWords, true
}

// HasRelatedWords returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinition) HasRelatedWords() bool {
	if o != nil && !IsNil(o.RelatedWords) {
		return true
	}

	return false
}

// SetRelatedWords gets a reference to the given []string and assigns it to the RelatedWords field.
func (o *TranslateDictionary200ResponseDefinition) SetRelatedWords(v []string) {
	o.RelatedWords = v
}

func (o TranslateDictionary200ResponseDefinition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateDictionary200ResponseDefinition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Word) {
		toSerialize["word"] = o.Word
	}
	if !IsNil(o.PrimaryMeaning) {
		toSerialize["primary_meaning"] = o.PrimaryMeaning
	}
	if !IsNil(o.SecondaryMeanings) {
		toSerialize["secondary_meanings"] = o.SecondaryMeanings
	}
	if !IsNil(o.Examples) {
		toSerialize["examples"] = o.Examples
	}
	if !IsNil(o.Pronunciation) {
		toSerialize["pronunciation"] = o.Pronunciation
	}
	if !IsNil(o.Etymology) {
		toSerialize["etymology"] = o.Etymology
	}
	if !IsNil(o.Notes) {
		toSerialize["notes"] = o.Notes
	}
	if !IsNil(o.TemporalTrend) {
		toSerialize["temporal_trend"] = o.TemporalTrend
	}
	if !IsNil(o.Gender) {
		toSerialize["gender"] = o.Gender
	}
	if !IsNil(o.Plural) {
		toSerialize["plural"] = o.Plural
	}
	if !IsNil(o.ConjugationNotes) {
		toSerialize["conjugation_notes"] = o.ConjugationNotes
	}
	if !IsNil(o.RelatedWords) {
		toSerialize["related_words"] = o.RelatedWords
	}
	return toSerialize, nil
}

type NullableTranslateDictionary200ResponseDefinition struct {
	value *TranslateDictionary200ResponseDefinition
	isSet bool
}

func (v NullableTranslateDictionary200ResponseDefinition) Get() *TranslateDictionary200ResponseDefinition {
	return v.value
}

func (v *NullableTranslateDictionary200ResponseDefinition) Set(val *TranslateDictionary200ResponseDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDictionary200ResponseDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDictionary200ResponseDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDictionary200ResponseDefinition(val *TranslateDictionary200ResponseDefinition) *NullableTranslateDictionary200ResponseDefinition {
	return &NullableTranslateDictionary200ResponseDefinition{value: val, isSet: true}
}

func (v NullableTranslateDictionary200ResponseDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDictionary200ResponseDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


