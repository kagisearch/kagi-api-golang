/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)


// Search200ResponseDataInner struct for Search200ResponseDataInner
type Search200ResponseDataInner struct {
	SearchObject *SearchObject
	SearchRelated *SearchRelated
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *Search200ResponseDataInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into SearchObject
	err = json.Unmarshal(data, &dst.SearchObject);
	if err == nil {
		jsonSearchObject, _ := json.Marshal(dst.SearchObject)
		if string(jsonSearchObject) == "{}" { // empty struct
			dst.SearchObject = nil
		} else {
			return nil // data stored in dst.SearchObject, return on the first match
		}
	} else {
		dst.SearchObject = nil
	}

	// try to unmarshal JSON data into SearchRelated
	err = json.Unmarshal(data, &dst.SearchRelated);
	if err == nil {
		jsonSearchRelated, _ := json.Marshal(dst.SearchRelated)
		if string(jsonSearchRelated) == "{}" { // empty struct
			dst.SearchRelated = nil
		} else {
			return nil // data stored in dst.SearchRelated, return on the first match
		}
	} else {
		dst.SearchRelated = nil
	}

	return fmt.Errorf("data failed to match schemas in anyOf(Search200ResponseDataInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Search200ResponseDataInner) MarshalJSON() ([]byte, error) {
	if src.SearchObject != nil {
		return json.Marshal(&src.SearchObject)
	}

	if src.SearchRelated != nil {
		return json.Marshal(&src.SearchRelated)
	}

	return nil, nil // no data in anyOf schemas
}


type NullableSearch200ResponseDataInner struct {
	value *Search200ResponseDataInner
	isSet bool
}

func (v NullableSearch200ResponseDataInner) Get() *Search200ResponseDataInner {
	return v.value
}

func (v *NullableSearch200ResponseDataInner) Set(val *Search200ResponseDataInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSearch200ResponseDataInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSearch200ResponseDataInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearch200ResponseDataInner(val *Search200ResponseDataInner) *NullableSearch200ResponseDataInner {
	return &NullableSearch200ResponseDataInner{value: val, isSet: true}
}

func (v NullableSearch200ResponseDataInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearch200ResponseDataInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


