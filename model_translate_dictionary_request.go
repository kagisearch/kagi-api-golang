/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TranslateDictionaryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateDictionaryRequest{}

// TranslateDictionaryRequest struct for TranslateDictionaryRequest
type TranslateDictionaryRequest struct {
	// The word to look up
	Word string `json:"word"`
	// Language code (ISO-639) of the word, or \"auto\" for automatic detection
	WordLanguage *string `json:"word_language,omitempty"`
	// Language code (ISO-639) for the definition output
	DefinitionLanguage *string `json:"definition_language,omitempty"`
}

type _TranslateDictionaryRequest TranslateDictionaryRequest

// NewTranslateDictionaryRequest instantiates a new TranslateDictionaryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDictionaryRequest(word string) *TranslateDictionaryRequest {
	this := TranslateDictionaryRequest{}
	this.Word = word
	var wordLanguage string = "en"
	this.WordLanguage = &wordLanguage
	var definitionLanguage string = "en"
	this.DefinitionLanguage = &definitionLanguage
	return &this
}

// NewTranslateDictionaryRequestWithDefaults instantiates a new TranslateDictionaryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDictionaryRequestWithDefaults() *TranslateDictionaryRequest {
	this := TranslateDictionaryRequest{}
	var wordLanguage string = "en"
	this.WordLanguage = &wordLanguage
	var definitionLanguage string = "en"
	this.DefinitionLanguage = &definitionLanguage
	return &this
}

// GetWord returns the Word field value
func (o *TranslateDictionaryRequest) GetWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Word
}

// GetWordOk returns a tuple with the Word field value
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetWordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Word, true
}

// SetWord sets field value
func (o *TranslateDictionaryRequest) SetWord(v string) {
	o.Word = v
}

// GetWordLanguage returns the WordLanguage field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetWordLanguage() string {
	if o == nil || IsNil(o.WordLanguage) {
		var ret string
		return ret
	}
	return *o.WordLanguage
}

// GetWordLanguageOk returns a tuple with the WordLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetWordLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.WordLanguage) {
		return nil, false
	}
	return o.WordLanguage, true
}

// HasWordLanguage returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasWordLanguage() bool {
	if o != nil && !IsNil(o.WordLanguage) {
		return true
	}

	return false
}

// SetWordLanguage gets a reference to the given string and assigns it to the WordLanguage field.
func (o *TranslateDictionaryRequest) SetWordLanguage(v string) {
	o.WordLanguage = &v
}

// GetDefinitionLanguage returns the DefinitionLanguage field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetDefinitionLanguage() string {
	if o == nil || IsNil(o.DefinitionLanguage) {
		var ret string
		return ret
	}
	return *o.DefinitionLanguage
}

// GetDefinitionLanguageOk returns a tuple with the DefinitionLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetDefinitionLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionLanguage) {
		return nil, false
	}
	return o.DefinitionLanguage, true
}

// HasDefinitionLanguage returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasDefinitionLanguage() bool {
	if o != nil && !IsNil(o.DefinitionLanguage) {
		return true
	}

	return false
}

// SetDefinitionLanguage gets a reference to the given string and assigns it to the DefinitionLanguage field.
func (o *TranslateDictionaryRequest) SetDefinitionLanguage(v string) {
	o.DefinitionLanguage = &v
}

func (o TranslateDictionaryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateDictionaryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["word"] = o.Word
	if !IsNil(o.WordLanguage) {
		toSerialize["word_language"] = o.WordLanguage
	}
	if !IsNil(o.DefinitionLanguage) {
		toSerialize["definition_language"] = o.DefinitionLanguage
	}
	return toSerialize, nil
}

func (o *TranslateDictionaryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"word",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTranslateDictionaryRequest := _TranslateDictionaryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTranslateDictionaryRequest)

	if err != nil {
		return err
	}

	*o = TranslateDictionaryRequest(varTranslateDictionaryRequest)

	return err
}

type NullableTranslateDictionaryRequest struct {
	value *TranslateDictionaryRequest
	isSet bool
}

func (v NullableTranslateDictionaryRequest) Get() *TranslateDictionaryRequest {
	return v.value
}

func (v *NullableTranslateDictionaryRequest) Set(val *TranslateDictionaryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDictionaryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDictionaryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDictionaryRequest(val *TranslateDictionaryRequest) *NullableTranslateDictionaryRequest {
	return &NullableTranslateDictionaryRequest{value: val, isSet: true}
}

func (v NullableTranslateDictionaryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDictionaryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


