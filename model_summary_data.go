/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SummaryData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SummaryData{}

// SummaryData struct for SummaryData
type SummaryData struct {
	Output string `json:"output"`
	Tokens int32 `json:"tokens"`
}

type _SummaryData SummaryData

// NewSummaryData instantiates a new SummaryData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSummaryData(output string, tokens int32) *SummaryData {
	this := SummaryData{}
	this.Output = output
	this.Tokens = tokens
	return &this
}

// NewSummaryDataWithDefaults instantiates a new SummaryData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSummaryDataWithDefaults() *SummaryData {
	this := SummaryData{}
	return &this
}

// GetOutput returns the Output field value
func (o *SummaryData) GetOutput() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Output
}

// GetOutputOk returns a tuple with the Output field value
// and a boolean to check if the value has been set.
func (o *SummaryData) GetOutputOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Output, true
}

// SetOutput sets field value
func (o *SummaryData) SetOutput(v string) {
	o.Output = v
}

// GetTokens returns the Tokens field value
func (o *SummaryData) GetTokens() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Tokens
}

// GetTokensOk returns a tuple with the Tokens field value
// and a boolean to check if the value has been set.
func (o *SummaryData) GetTokensOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tokens, true
}

// SetTokens sets field value
func (o *SummaryData) SetTokens(v int32) {
	o.Tokens = v
}

func (o SummaryData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SummaryData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["output"] = o.Output
	toSerialize["tokens"] = o.Tokens
	return toSerialize, nil
}

func (o *SummaryData) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"output",
		"tokens",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSummaryData := _SummaryData{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSummaryData)

	if err != nil {
		return err
	}

	*o = SummaryData(varSummaryData)

	return err
}

type NullableSummaryData struct {
	value *SummaryData
	isSet bool
}

func (v NullableSummaryData) Get() *SummaryData {
	return v.value
}

func (v *NullableSummaryData) Set(val *SummaryData) {
	v.value = val
	v.isSet = true
}

func (v NullableSummaryData) IsSet() bool {
	return v.isSet
}

func (v *NullableSummaryData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSummaryData(val *SummaryData) *NullableSummaryData {
	return &NullableSummaryData{value: val, isSet: true}
}

func (v NullableSummaryData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSummaryData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


