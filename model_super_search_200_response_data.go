/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SuperSearch200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperSearch200ResponseData{}

// SuperSearch200ResponseData struct for SuperSearch200ResponseData
type SuperSearch200ResponseData struct {
	Search []V1ResultSearch `json:"search,omitempty"`
	Video []V1ResultVideo `json:"video,omitempty"`
	AdjacentQuestion []V1ResultAdjacentQuestion `json:"adjacent_question,omitempty"`
	Infobox []V1ResultInfobox `json:"infobox,omitempty"`
	WebArchive []V1ResultWebArchive `json:"web_archive,omitempty"`
}

// NewSuperSearch200ResponseData instantiates a new SuperSearch200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperSearch200ResponseData() *SuperSearch200ResponseData {
	this := SuperSearch200ResponseData{}
	return &this
}

// NewSuperSearch200ResponseDataWithDefaults instantiates a new SuperSearch200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperSearch200ResponseDataWithDefaults() *SuperSearch200ResponseData {
	this := SuperSearch200ResponseData{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetSearch() []V1ResultSearch {
	if o == nil || IsNil(o.Search) {
		var ret []V1ResultSearch
		return ret
	}
	return o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetSearchOk() ([]V1ResultSearch, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given []V1ResultSearch and assigns it to the Search field.
func (o *SuperSearch200ResponseData) SetSearch(v []V1ResultSearch) {
	o.Search = v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetVideo() []V1ResultVideo {
	if o == nil || IsNil(o.Video) {
		var ret []V1ResultVideo
		return ret
	}
	return o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetVideoOk() ([]V1ResultVideo, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given []V1ResultVideo and assigns it to the Video field.
func (o *SuperSearch200ResponseData) SetVideo(v []V1ResultVideo) {
	o.Video = v
}

// GetAdjacentQuestion returns the AdjacentQuestion field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetAdjacentQuestion() []V1ResultAdjacentQuestion {
	if o == nil || IsNil(o.AdjacentQuestion) {
		var ret []V1ResultAdjacentQuestion
		return ret
	}
	return o.AdjacentQuestion
}

// GetAdjacentQuestionOk returns a tuple with the AdjacentQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetAdjacentQuestionOk() ([]V1ResultAdjacentQuestion, bool) {
	if o == nil || IsNil(o.AdjacentQuestion) {
		return nil, false
	}
	return o.AdjacentQuestion, true
}

// HasAdjacentQuestion returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasAdjacentQuestion() bool {
	if o != nil && !IsNil(o.AdjacentQuestion) {
		return true
	}

	return false
}

// SetAdjacentQuestion gets a reference to the given []V1ResultAdjacentQuestion and assigns it to the AdjacentQuestion field.
func (o *SuperSearch200ResponseData) SetAdjacentQuestion(v []V1ResultAdjacentQuestion) {
	o.AdjacentQuestion = v
}

// GetInfobox returns the Infobox field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetInfobox() []V1ResultInfobox {
	if o == nil || IsNil(o.Infobox) {
		var ret []V1ResultInfobox
		return ret
	}
	return o.Infobox
}

// GetInfoboxOk returns a tuple with the Infobox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetInfoboxOk() ([]V1ResultInfobox, bool) {
	if o == nil || IsNil(o.Infobox) {
		return nil, false
	}
	return o.Infobox, true
}

// HasInfobox returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasInfobox() bool {
	if o != nil && !IsNil(o.Infobox) {
		return true
	}

	return false
}

// SetInfobox gets a reference to the given []V1ResultInfobox and assigns it to the Infobox field.
func (o *SuperSearch200ResponseData) SetInfobox(v []V1ResultInfobox) {
	o.Infobox = v
}

// GetWebArchive returns the WebArchive field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetWebArchive() []V1ResultWebArchive {
	if o == nil || IsNil(o.WebArchive) {
		var ret []V1ResultWebArchive
		return ret
	}
	return o.WebArchive
}

// GetWebArchiveOk returns a tuple with the WebArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetWebArchiveOk() ([]V1ResultWebArchive, bool) {
	if o == nil || IsNil(o.WebArchive) {
		return nil, false
	}
	return o.WebArchive, true
}

// HasWebArchive returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasWebArchive() bool {
	if o != nil && !IsNil(o.WebArchive) {
		return true
	}

	return false
}

// SetWebArchive gets a reference to the given []V1ResultWebArchive and assigns it to the WebArchive field.
func (o *SuperSearch200ResponseData) SetWebArchive(v []V1ResultWebArchive) {
	o.WebArchive = v
}

func (o SuperSearch200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperSearch200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}
	if !IsNil(o.AdjacentQuestion) {
		toSerialize["adjacent_question"] = o.AdjacentQuestion
	}
	if !IsNil(o.Infobox) {
		toSerialize["infobox"] = o.Infobox
	}
	if !IsNil(o.WebArchive) {
		toSerialize["web_archive"] = o.WebArchive
	}
	return toSerialize, nil
}

type NullableSuperSearch200ResponseData struct {
	value *SuperSearch200ResponseData
	isSet bool
}

func (v NullableSuperSearch200ResponseData) Get() *SuperSearch200ResponseData {
	return v.value
}

func (v *NullableSuperSearch200ResponseData) Set(val *SuperSearch200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperSearch200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperSearch200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperSearch200ResponseData(val *SuperSearch200ResponseData) *NullableSuperSearch200ResponseData {
	return &NullableSuperSearch200ResponseData{value: val, isSet: true}
}

func (v NullableSuperSearch200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperSearch200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


