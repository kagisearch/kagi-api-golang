/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ResultSearch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ResultSearch{}

// V1ResultSearch struct for V1ResultSearch
type V1ResultSearch struct {
	Url string `json:"url"`
	Title string `json:"title"`
	Snippet *string `json:"snippet,omitempty"`
	Time *string `json:"time,omitempty"`
	Image *V1ResultSearchImage `json:"image,omitempty"`
	Props *V1ResultSearchProps `json:"props,omitempty"`
}

type _V1ResultSearch V1ResultSearch

// NewV1ResultSearch instantiates a new V1ResultSearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResultSearch(url string, title string) *V1ResultSearch {
	this := V1ResultSearch{}
	this.Url = url
	this.Title = title
	return &this
}

// NewV1ResultSearchWithDefaults instantiates a new V1ResultSearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResultSearchWithDefaults() *V1ResultSearch {
	this := V1ResultSearch{}
	return &this
}

// GetUrl returns the Url field value
func (o *V1ResultSearch) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *V1ResultSearch) SetUrl(v string) {
	o.Url = v
}

// GetTitle returns the Title field value
func (o *V1ResultSearch) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *V1ResultSearch) SetTitle(v string) {
	o.Title = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *V1ResultSearch) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *V1ResultSearch) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *V1ResultSearch) SetSnippet(v string) {
	o.Snippet = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *V1ResultSearch) GetTime() string {
	if o == nil || IsNil(o.Time) {
		var ret string
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetTimeOk() (*string, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *V1ResultSearch) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given string and assigns it to the Time field.
func (o *V1ResultSearch) SetTime(v string) {
	o.Time = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *V1ResultSearch) GetImage() V1ResultSearchImage {
	if o == nil || IsNil(o.Image) {
		var ret V1ResultSearchImage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetImageOk() (*V1ResultSearchImage, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *V1ResultSearch) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given V1ResultSearchImage and assigns it to the Image field.
func (o *V1ResultSearch) SetImage(v V1ResultSearchImage) {
	o.Image = &v
}

// GetProps returns the Props field value if set, zero value otherwise.
func (o *V1ResultSearch) GetProps() V1ResultSearchProps {
	if o == nil || IsNil(o.Props) {
		var ret V1ResultSearchProps
		return ret
	}
	return *o.Props
}

// GetPropsOk returns a tuple with the Props field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearch) GetPropsOk() (*V1ResultSearchProps, bool) {
	if o == nil || IsNil(o.Props) {
		return nil, false
	}
	return o.Props, true
}

// HasProps returns a boolean if a field has been set.
func (o *V1ResultSearch) HasProps() bool {
	if o != nil && !IsNil(o.Props) {
		return true
	}

	return false
}

// SetProps gets a reference to the given V1ResultSearchProps and assigns it to the Props field.
func (o *V1ResultSearch) SetProps(v V1ResultSearchProps) {
	o.Props = &v
}

func (o V1ResultSearch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ResultSearch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	toSerialize["title"] = o.Title
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	if !IsNil(o.Props) {
		toSerialize["props"] = o.Props
	}
	return toSerialize, nil
}

func (o *V1ResultSearch) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ResultSearch := _V1ResultSearch{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ResultSearch)

	if err != nil {
		return err
	}

	*o = V1ResultSearch(varV1ResultSearch)

	return err
}

type NullableV1ResultSearch struct {
	value *V1ResultSearch
	isSet bool
}

func (v NullableV1ResultSearch) Get() *V1ResultSearch {
	return v.value
}

func (v *NullableV1ResultSearch) Set(val *V1ResultSearch) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResultSearch) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResultSearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResultSearch(val *V1ResultSearch) *NullableV1ResultSearch {
	return &NullableV1ResultSearch{value: val, isSet: true}
}

func (v NullableV1ResultSearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResultSearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


