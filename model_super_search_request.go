/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SuperSearchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperSearchRequest{}

// SuperSearchRequest Used to upload the search query
type SuperSearchRequest struct {
	Query string `json:"query"`
	Workflow *string `json:"workflow,omitempty"`
}

type _SuperSearchRequest SuperSearchRequest

// NewSuperSearchRequest instantiates a new SuperSearchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperSearchRequest(query string) *SuperSearchRequest {
	this := SuperSearchRequest{}
	this.Query = query
	return &this
}

// NewSuperSearchRequestWithDefaults instantiates a new SuperSearchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperSearchRequestWithDefaults() *SuperSearchRequest {
	this := SuperSearchRequest{}
	return &this
}

// GetQuery returns the Query field value
func (o *SuperSearchRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *SuperSearchRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *SuperSearchRequest) SetQuery(v string) {
	o.Query = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *SuperSearchRequest) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow) {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearchRequest) GetWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *SuperSearchRequest) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *SuperSearchRequest) SetWorkflow(v string) {
	o.Workflow = &v
}

func (o SuperSearchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperSearchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	return toSerialize, nil
}

func (o *SuperSearchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSuperSearchRequest := _SuperSearchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSuperSearchRequest)

	if err != nil {
		return err
	}

	*o = SuperSearchRequest(varSuperSearchRequest)

	return err
}

type NullableSuperSearchRequest struct {
	value *SuperSearchRequest
	isSet bool
}

func (v NullableSuperSearchRequest) Get() *SuperSearchRequest {
	return v.value
}

func (v *NullableSuperSearchRequest) Set(val *SuperSearchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperSearchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperSearchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperSearchRequest(val *SuperSearchRequest) *NullableSuperSearchRequest {
	return &NullableSuperSearchRequest{value: val, isSet: true}
}

func (v NullableSuperSearchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperSearchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


