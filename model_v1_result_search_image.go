/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ResultSearchImage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ResultSearchImage{}

// V1ResultSearchImage struct for V1ResultSearchImage
type V1ResultSearchImage struct {
	Url string `json:"url"`
	Height *int32 `json:"height,omitempty"`
	Width *int32 `json:"width,omitempty"`
}

type _V1ResultSearchImage V1ResultSearchImage

// NewV1ResultSearchImage instantiates a new V1ResultSearchImage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResultSearchImage(url string) *V1ResultSearchImage {
	this := V1ResultSearchImage{}
	this.Url = url
	return &this
}

// NewV1ResultSearchImageWithDefaults instantiates a new V1ResultSearchImage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResultSearchImageWithDefaults() *V1ResultSearchImage {
	this := V1ResultSearchImage{}
	return &this
}

// GetUrl returns the Url field value
func (o *V1ResultSearchImage) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *V1ResultSearchImage) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *V1ResultSearchImage) SetUrl(v string) {
	o.Url = v
}

// GetHeight returns the Height field value if set, zero value otherwise.
func (o *V1ResultSearchImage) GetHeight() int32 {
	if o == nil || IsNil(o.Height) {
		var ret int32
		return ret
	}
	return *o.Height
}

// GetHeightOk returns a tuple with the Height field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearchImage) GetHeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Height) {
		return nil, false
	}
	return o.Height, true
}

// HasHeight returns a boolean if a field has been set.
func (o *V1ResultSearchImage) HasHeight() bool {
	if o != nil && !IsNil(o.Height) {
		return true
	}

	return false
}

// SetHeight gets a reference to the given int32 and assigns it to the Height field.
func (o *V1ResultSearchImage) SetHeight(v int32) {
	o.Height = &v
}

// GetWidth returns the Width field value if set, zero value otherwise.
func (o *V1ResultSearchImage) GetWidth() int32 {
	if o == nil || IsNil(o.Width) {
		var ret int32
		return ret
	}
	return *o.Width
}

// GetWidthOk returns a tuple with the Width field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1ResultSearchImage) GetWidthOk() (*int32, bool) {
	if o == nil || IsNil(o.Width) {
		return nil, false
	}
	return o.Width, true
}

// HasWidth returns a boolean if a field has been set.
func (o *V1ResultSearchImage) HasWidth() bool {
	if o != nil && !IsNil(o.Width) {
		return true
	}

	return false
}

// SetWidth gets a reference to the given int32 and assigns it to the Width field.
func (o *V1ResultSearchImage) SetWidth(v int32) {
	o.Width = &v
}

func (o V1ResultSearchImage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ResultSearchImage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["url"] = o.Url
	if !IsNil(o.Height) {
		toSerialize["height"] = o.Height
	}
	if !IsNil(o.Width) {
		toSerialize["width"] = o.Width
	}
	return toSerialize, nil
}

func (o *V1ResultSearchImage) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ResultSearchImage := _V1ResultSearchImage{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ResultSearchImage)

	if err != nil {
		return err
	}

	*o = V1ResultSearchImage(varV1ResultSearchImage)

	return err
}

type NullableV1ResultSearchImage struct {
	value *V1ResultSearchImage
	isSet bool
}

func (v NullableV1ResultSearchImage) Get() *V1ResultSearchImage {
	return v.value
}

func (v *NullableV1ResultSearchImage) Set(val *V1ResultSearchImage) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResultSearchImage) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResultSearchImage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResultSearchImage(val *V1ResultSearchImage) *NullableV1ResultSearchImage {
	return &NullableV1ResultSearchImage{value: val, isSet: true}
}

func (v NullableV1ResultSearchImage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResultSearchImage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


