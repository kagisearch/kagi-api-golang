/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FastGPT200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FastGPT200Response{}

// FastGPT200Response A response with a description and results references used
type FastGPT200Response struct {
	Meta *Meta `json:"meta,omitempty"`
	Data *FastGPT200ResponseData `json:"data,omitempty"`
}

// NewFastGPT200Response instantiates a new FastGPT200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFastGPT200Response() *FastGPT200Response {
	this := FastGPT200Response{}
	return &this
}

// NewFastGPT200ResponseWithDefaults instantiates a new FastGPT200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFastGPT200ResponseWithDefaults() *FastGPT200Response {
	this := FastGPT200Response{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FastGPT200Response) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastGPT200Response) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FastGPT200Response) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *FastGPT200Response) SetMeta(v Meta) {
	o.Meta = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *FastGPT200Response) GetData() FastGPT200ResponseData {
	if o == nil || IsNil(o.Data) {
		var ret FastGPT200ResponseData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastGPT200Response) GetDataOk() (*FastGPT200ResponseData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FastGPT200Response) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given FastGPT200ResponseData and assigns it to the Data field.
func (o *FastGPT200Response) SetData(v FastGPT200ResponseData) {
	o.Data = &v
}

func (o FastGPT200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FastGPT200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	return toSerialize, nil
}

type NullableFastGPT200Response struct {
	value *FastGPT200Response
	isSet bool
}

func (v NullableFastGPT200Response) Get() *FastGPT200Response {
	return v.value
}

func (v *NullableFastGPT200Response) Set(val *FastGPT200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFastGPT200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFastGPT200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFastGPT200Response(val *FastGPT200Response) *NullableFastGPT200Response {
	return &NullableFastGPT200Response{value: val, isSet: true}
}

func (v NullableFastGPT200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFastGPT200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


