/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1ResultInfoboxPropsInfoboxInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1ResultInfoboxPropsInfoboxInner{}

// V1ResultInfoboxPropsInfoboxInner struct for V1ResultInfoboxPropsInfoboxInner
type V1ResultInfoboxPropsInfoboxInner struct {
	Header string `json:"header"`
	Value string `json:"value"`
	Merged bool `json:"merged"`
}

type _V1ResultInfoboxPropsInfoboxInner V1ResultInfoboxPropsInfoboxInner

// NewV1ResultInfoboxPropsInfoboxInner instantiates a new V1ResultInfoboxPropsInfoboxInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1ResultInfoboxPropsInfoboxInner(header string, value string, merged bool) *V1ResultInfoboxPropsInfoboxInner {
	this := V1ResultInfoboxPropsInfoboxInner{}
	this.Header = header
	this.Value = value
	this.Merged = merged
	return &this
}

// NewV1ResultInfoboxPropsInfoboxInnerWithDefaults instantiates a new V1ResultInfoboxPropsInfoboxInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1ResultInfoboxPropsInfoboxInnerWithDefaults() *V1ResultInfoboxPropsInfoboxInner {
	this := V1ResultInfoboxPropsInfoboxInner{}
	return &this
}

// GetHeader returns the Header field value
func (o *V1ResultInfoboxPropsInfoboxInner) GetHeader() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Header
}

// GetHeaderOk returns a tuple with the Header field value
// and a boolean to check if the value has been set.
func (o *V1ResultInfoboxPropsInfoboxInner) GetHeaderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Header, true
}

// SetHeader sets field value
func (o *V1ResultInfoboxPropsInfoboxInner) SetHeader(v string) {
	o.Header = v
}

// GetValue returns the Value field value
func (o *V1ResultInfoboxPropsInfoboxInner) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *V1ResultInfoboxPropsInfoboxInner) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *V1ResultInfoboxPropsInfoboxInner) SetValue(v string) {
	o.Value = v
}

// GetMerged returns the Merged field value
func (o *V1ResultInfoboxPropsInfoboxInner) GetMerged() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Merged
}

// GetMergedOk returns a tuple with the Merged field value
// and a boolean to check if the value has been set.
func (o *V1ResultInfoboxPropsInfoboxInner) GetMergedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Merged, true
}

// SetMerged sets field value
func (o *V1ResultInfoboxPropsInfoboxInner) SetMerged(v bool) {
	o.Merged = v
}

func (o V1ResultInfoboxPropsInfoboxInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1ResultInfoboxPropsInfoboxInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["header"] = o.Header
	toSerialize["value"] = o.Value
	toSerialize["merged"] = o.Merged
	return toSerialize, nil
}

func (o *V1ResultInfoboxPropsInfoboxInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"header",
		"value",
		"merged",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1ResultInfoboxPropsInfoboxInner := _V1ResultInfoboxPropsInfoboxInner{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1ResultInfoboxPropsInfoboxInner)

	if err != nil {
		return err
	}

	*o = V1ResultInfoboxPropsInfoboxInner(varV1ResultInfoboxPropsInfoboxInner)

	return err
}

type NullableV1ResultInfoboxPropsInfoboxInner struct {
	value *V1ResultInfoboxPropsInfoboxInner
	isSet bool
}

func (v NullableV1ResultInfoboxPropsInfoboxInner) Get() *V1ResultInfoboxPropsInfoboxInner {
	return v.value
}

func (v *NullableV1ResultInfoboxPropsInfoboxInner) Set(val *V1ResultInfoboxPropsInfoboxInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1ResultInfoboxPropsInfoboxInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1ResultInfoboxPropsInfoboxInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1ResultInfoboxPropsInfoboxInner(val *V1ResultInfoboxPropsInfoboxInner) *NullableV1ResultInfoboxPropsInfoboxInner {
	return &NullableV1ResultInfoboxPropsInfoboxInner{value: val, isSet: true}
}

func (v NullableV1ResultInfoboxPropsInfoboxInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1ResultInfoboxPropsInfoboxInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


