/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateListLanguagesPostRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateListLanguagesPostRequest{}

// TranslateListLanguagesPostRequest struct for TranslateListLanguagesPostRequest
type TranslateListLanguagesPostRequest struct {
	// Type of languages to return ('source' or 'target')
	Type *string `json:"type,omitempty"`
	// Locale code to use for language names (e.g., 'en', 'de', 'fr')
	Locale *string `json:"locale,omitempty"`
}

// NewTranslateListLanguagesPostRequest instantiates a new TranslateListLanguagesPostRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateListLanguagesPostRequest() *TranslateListLanguagesPostRequest {
	this := TranslateListLanguagesPostRequest{}
	return &this
}

// NewTranslateListLanguagesPostRequestWithDefaults instantiates a new TranslateListLanguagesPostRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateListLanguagesPostRequestWithDefaults() *TranslateListLanguagesPostRequest {
	this := TranslateListLanguagesPostRequest{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TranslateListLanguagesPostRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateListLanguagesPostRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TranslateListLanguagesPostRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TranslateListLanguagesPostRequest) SetType(v string) {
	o.Type = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *TranslateListLanguagesPostRequest) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateListLanguagesPostRequest) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *TranslateListLanguagesPostRequest) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *TranslateListLanguagesPostRequest) SetLocale(v string) {
	o.Locale = &v
}

func (o TranslateListLanguagesPostRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateListLanguagesPostRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}
	return toSerialize, nil
}

type NullableTranslateListLanguagesPostRequest struct {
	value *TranslateListLanguagesPostRequest
	isSet bool
}

func (v NullableTranslateListLanguagesPostRequest) Get() *TranslateListLanguagesPostRequest {
	return v.value
}

func (v *NullableTranslateListLanguagesPostRequest) Set(val *TranslateListLanguagesPostRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateListLanguagesPostRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateListLanguagesPostRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateListLanguagesPostRequest(val *TranslateListLanguagesPostRequest) *NullableTranslateListLanguagesPostRequest {
	return &NullableTranslateListLanguagesPostRequest{value: val, isSet: true}
}

func (v NullableTranslateListLanguagesPostRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateListLanguagesPostRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


