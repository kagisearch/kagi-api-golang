/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1MetaQuery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1MetaQuery{}

// V1MetaQuery struct for V1MetaQuery
type V1MetaQuery struct {
	Raw *string `json:"raw,omitempty"`
	Terms *string `json:"terms,omitempty"`
	Fields []V1MetaQueryFieldsInner `json:"fields,omitempty"`
	Workflow *string `json:"workflow,omitempty"`
}

// NewV1MetaQuery instantiates a new V1MetaQuery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1MetaQuery() *V1MetaQuery {
	this := V1MetaQuery{}
	return &this
}

// NewV1MetaQueryWithDefaults instantiates a new V1MetaQuery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1MetaQueryWithDefaults() *V1MetaQuery {
	this := V1MetaQuery{}
	return &this
}

// GetRaw returns the Raw field value if set, zero value otherwise.
func (o *V1MetaQuery) GetRaw() string {
	if o == nil || IsNil(o.Raw) {
		var ret string
		return ret
	}
	return *o.Raw
}

// GetRawOk returns a tuple with the Raw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQuery) GetRawOk() (*string, bool) {
	if o == nil || IsNil(o.Raw) {
		return nil, false
	}
	return o.Raw, true
}

// HasRaw returns a boolean if a field has been set.
func (o *V1MetaQuery) HasRaw() bool {
	if o != nil && !IsNil(o.Raw) {
		return true
	}

	return false
}

// SetRaw gets a reference to the given string and assigns it to the Raw field.
func (o *V1MetaQuery) SetRaw(v string) {
	o.Raw = &v
}

// GetTerms returns the Terms field value if set, zero value otherwise.
func (o *V1MetaQuery) GetTerms() string {
	if o == nil || IsNil(o.Terms) {
		var ret string
		return ret
	}
	return *o.Terms
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQuery) GetTermsOk() (*string, bool) {
	if o == nil || IsNil(o.Terms) {
		return nil, false
	}
	return o.Terms, true
}

// HasTerms returns a boolean if a field has been set.
func (o *V1MetaQuery) HasTerms() bool {
	if o != nil && !IsNil(o.Terms) {
		return true
	}

	return false
}

// SetTerms gets a reference to the given string and assigns it to the Terms field.
func (o *V1MetaQuery) SetTerms(v string) {
	o.Terms = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *V1MetaQuery) GetFields() []V1MetaQueryFieldsInner {
	if o == nil || IsNil(o.Fields) {
		var ret []V1MetaQueryFieldsInner
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQuery) GetFieldsOk() ([]V1MetaQueryFieldsInner, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *V1MetaQuery) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []V1MetaQueryFieldsInner and assigns it to the Fields field.
func (o *V1MetaQuery) SetFields(v []V1MetaQueryFieldsInner) {
	o.Fields = v
}

// GetWorkflow returns the Workflow field value if set, zero value otherwise.
func (o *V1MetaQuery) GetWorkflow() string {
	if o == nil || IsNil(o.Workflow) {
		var ret string
		return ret
	}
	return *o.Workflow
}

// GetWorkflowOk returns a tuple with the Workflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQuery) GetWorkflowOk() (*string, bool) {
	if o == nil || IsNil(o.Workflow) {
		return nil, false
	}
	return o.Workflow, true
}

// HasWorkflow returns a boolean if a field has been set.
func (o *V1MetaQuery) HasWorkflow() bool {
	if o != nil && !IsNil(o.Workflow) {
		return true
	}

	return false
}

// SetWorkflow gets a reference to the given string and assigns it to the Workflow field.
func (o *V1MetaQuery) SetWorkflow(v string) {
	o.Workflow = &v
}

func (o V1MetaQuery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1MetaQuery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Raw) {
		toSerialize["raw"] = o.Raw
	}
	if !IsNil(o.Terms) {
		toSerialize["terms"] = o.Terms
	}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if !IsNil(o.Workflow) {
		toSerialize["workflow"] = o.Workflow
	}
	return toSerialize, nil
}

type NullableV1MetaQuery struct {
	value *V1MetaQuery
	isSet bool
}

func (v NullableV1MetaQuery) Get() *V1MetaQuery {
	return v.value
}

func (v *NullableV1MetaQuery) Set(val *V1MetaQuery) {
	v.value = val
	v.isSet = true
}

func (v NullableV1MetaQuery) IsSet() bool {
	return v.isSet
}

func (v *NullableV1MetaQuery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1MetaQuery(val *V1MetaQuery) *NullableV1MetaQuery {
	return &NullableV1MetaQuery{value: val, isSet: true}
}

func (v NullableV1MetaQuery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1MetaQuery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


