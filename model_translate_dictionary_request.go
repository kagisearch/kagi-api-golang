/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TranslateDictionaryRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateDictionaryRequest{}

// TranslateDictionaryRequest struct for TranslateDictionaryRequest
type TranslateDictionaryRequest struct {
	// The word to look up
	Word string `json:"word"`
	// Language code (ISO-639) of the word, or \"auto\" for automatic detection
	WordLanguage *string `json:"word_language,omitempty"`
	// Language code (ISO-639) for the definition output
	DefinitionLanguage *string `json:"definition_language,omitempty"`
	// Whether to return a streaming response with fields sent as they become available
	Stream *bool `json:"stream,omitempty"`
	// Whether to allow NSFW/inappropriate content. If false, returns empty definition for inappropriate words
	Nsfw *bool `json:"nsfw,omitempty"`
	// Optional model identifier. Can be either a model name (e.g., \"gpt-4o\", \"claude-35-sonnet\", \"gemini-flash-2.0\") or a model constant (e.g., \"ANTHROPIC_CLAUDE_35_SONNET\", \"OPENAI_GPT4O\"). See model-selection.ts for full list.
	Model *string `json:"model,omitempty"`
}

type _TranslateDictionaryRequest TranslateDictionaryRequest

// NewTranslateDictionaryRequest instantiates a new TranslateDictionaryRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDictionaryRequest(word string) *TranslateDictionaryRequest {
	this := TranslateDictionaryRequest{}
	this.Word = word
	var wordLanguage string = "en"
	this.WordLanguage = &wordLanguage
	var definitionLanguage string = "en"
	this.DefinitionLanguage = &definitionLanguage
	var stream bool = false
	this.Stream = &stream
	var nsfw bool = true
	this.Nsfw = &nsfw
	return &this
}

// NewTranslateDictionaryRequestWithDefaults instantiates a new TranslateDictionaryRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDictionaryRequestWithDefaults() *TranslateDictionaryRequest {
	this := TranslateDictionaryRequest{}
	var wordLanguage string = "en"
	this.WordLanguage = &wordLanguage
	var definitionLanguage string = "en"
	this.DefinitionLanguage = &definitionLanguage
	var stream bool = false
	this.Stream = &stream
	var nsfw bool = true
	this.Nsfw = &nsfw
	return &this
}

// GetWord returns the Word field value
func (o *TranslateDictionaryRequest) GetWord() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Word
}

// GetWordOk returns a tuple with the Word field value
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetWordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Word, true
}

// SetWord sets field value
func (o *TranslateDictionaryRequest) SetWord(v string) {
	o.Word = v
}

// GetWordLanguage returns the WordLanguage field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetWordLanguage() string {
	if o == nil || IsNil(o.WordLanguage) {
		var ret string
		return ret
	}
	return *o.WordLanguage
}

// GetWordLanguageOk returns a tuple with the WordLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetWordLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.WordLanguage) {
		return nil, false
	}
	return o.WordLanguage, true
}

// HasWordLanguage returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasWordLanguage() bool {
	if o != nil && !IsNil(o.WordLanguage) {
		return true
	}

	return false
}

// SetWordLanguage gets a reference to the given string and assigns it to the WordLanguage field.
func (o *TranslateDictionaryRequest) SetWordLanguage(v string) {
	o.WordLanguage = &v
}

// GetDefinitionLanguage returns the DefinitionLanguage field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetDefinitionLanguage() string {
	if o == nil || IsNil(o.DefinitionLanguage) {
		var ret string
		return ret
	}
	return *o.DefinitionLanguage
}

// GetDefinitionLanguageOk returns a tuple with the DefinitionLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetDefinitionLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DefinitionLanguage) {
		return nil, false
	}
	return o.DefinitionLanguage, true
}

// HasDefinitionLanguage returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasDefinitionLanguage() bool {
	if o != nil && !IsNil(o.DefinitionLanguage) {
		return true
	}

	return false
}

// SetDefinitionLanguage gets a reference to the given string and assigns it to the DefinitionLanguage field.
func (o *TranslateDictionaryRequest) SetDefinitionLanguage(v string) {
	o.DefinitionLanguage = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *TranslateDictionaryRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetNsfw returns the Nsfw field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetNsfw() bool {
	if o == nil || IsNil(o.Nsfw) {
		var ret bool
		return ret
	}
	return *o.Nsfw
}

// GetNsfwOk returns a tuple with the Nsfw field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetNsfwOk() (*bool, bool) {
	if o == nil || IsNil(o.Nsfw) {
		return nil, false
	}
	return o.Nsfw, true
}

// HasNsfw returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasNsfw() bool {
	if o != nil && !IsNil(o.Nsfw) {
		return true
	}

	return false
}

// SetNsfw gets a reference to the given bool and assigns it to the Nsfw field.
func (o *TranslateDictionaryRequest) SetNsfw(v bool) {
	o.Nsfw = &v
}

// GetModel returns the Model field value if set, zero value otherwise.
func (o *TranslateDictionaryRequest) GetModel() string {
	if o == nil || IsNil(o.Model) {
		var ret string
		return ret
	}
	return *o.Model
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionaryRequest) GetModelOk() (*string, bool) {
	if o == nil || IsNil(o.Model) {
		return nil, false
	}
	return o.Model, true
}

// HasModel returns a boolean if a field has been set.
func (o *TranslateDictionaryRequest) HasModel() bool {
	if o != nil && !IsNil(o.Model) {
		return true
	}

	return false
}

// SetModel gets a reference to the given string and assigns it to the Model field.
func (o *TranslateDictionaryRequest) SetModel(v string) {
	o.Model = &v
}

func (o TranslateDictionaryRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateDictionaryRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["word"] = o.Word
	if !IsNil(o.WordLanguage) {
		toSerialize["word_language"] = o.WordLanguage
	}
	if !IsNil(o.DefinitionLanguage) {
		toSerialize["definition_language"] = o.DefinitionLanguage
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.Nsfw) {
		toSerialize["nsfw"] = o.Nsfw
	}
	if !IsNil(o.Model) {
		toSerialize["model"] = o.Model
	}
	return toSerialize, nil
}

func (o *TranslateDictionaryRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"word",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTranslateDictionaryRequest := _TranslateDictionaryRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTranslateDictionaryRequest)

	if err != nil {
		return err
	}

	*o = TranslateDictionaryRequest(varTranslateDictionaryRequest)

	return err
}

type NullableTranslateDictionaryRequest struct {
	value *TranslateDictionaryRequest
	isSet bool
}

func (v NullableTranslateDictionaryRequest) Get() *TranslateDictionaryRequest {
	return v.value
}

func (v *NullableTranslateDictionaryRequest) Set(val *TranslateDictionaryRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDictionaryRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDictionaryRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDictionaryRequest(val *TranslateDictionaryRequest) *NullableTranslateDictionaryRequest {
	return &NullableTranslateDictionaryRequest{value: val, isSet: true}
}

func (v NullableTranslateDictionaryRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDictionaryRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


