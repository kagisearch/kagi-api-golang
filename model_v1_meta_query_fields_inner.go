/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the V1MetaQueryFieldsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1MetaQueryFieldsInner{}

// V1MetaQueryFieldsInner struct for V1MetaQueryFieldsInner
type V1MetaQueryFieldsInner struct {
	Kind *string `json:"kind,omitempty"`
	Value *string `json:"value,omitempty"`
	Name *string `json:"name,omitempty"`
	Negate *bool `json:"negate,omitempty"`
}

// NewV1MetaQueryFieldsInner instantiates a new V1MetaQueryFieldsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1MetaQueryFieldsInner() *V1MetaQueryFieldsInner {
	this := V1MetaQueryFieldsInner{}
	return &this
}

// NewV1MetaQueryFieldsInnerWithDefaults instantiates a new V1MetaQueryFieldsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1MetaQueryFieldsInnerWithDefaults() *V1MetaQueryFieldsInner {
	this := V1MetaQueryFieldsInner{}
	return &this
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1MetaQueryFieldsInner) GetKind() string {
	if o == nil || IsNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQueryFieldsInner) GetKindOk() (*string, bool) {
	if o == nil || IsNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1MetaQueryFieldsInner) HasKind() bool {
	if o != nil && !IsNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1MetaQueryFieldsInner) SetKind(v string) {
	o.Kind = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *V1MetaQueryFieldsInner) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQueryFieldsInner) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *V1MetaQueryFieldsInner) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *V1MetaQueryFieldsInner) SetValue(v string) {
	o.Value = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1MetaQueryFieldsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQueryFieldsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1MetaQueryFieldsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1MetaQueryFieldsInner) SetName(v string) {
	o.Name = &v
}

// GetNegate returns the Negate field value if set, zero value otherwise.
func (o *V1MetaQueryFieldsInner) GetNegate() bool {
	if o == nil || IsNil(o.Negate) {
		var ret bool
		return ret
	}
	return *o.Negate
}

// GetNegateOk returns a tuple with the Negate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1MetaQueryFieldsInner) GetNegateOk() (*bool, bool) {
	if o == nil || IsNil(o.Negate) {
		return nil, false
	}
	return o.Negate, true
}

// HasNegate returns a boolean if a field has been set.
func (o *V1MetaQueryFieldsInner) HasNegate() bool {
	if o != nil && !IsNil(o.Negate) {
		return true
	}

	return false
}

// SetNegate gets a reference to the given bool and assigns it to the Negate field.
func (o *V1MetaQueryFieldsInner) SetNegate(v bool) {
	o.Negate = &v
}

func (o V1MetaQueryFieldsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1MetaQueryFieldsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Negate) {
		toSerialize["negate"] = o.Negate
	}
	return toSerialize, nil
}

type NullableV1MetaQueryFieldsInner struct {
	value *V1MetaQueryFieldsInner
	isSet bool
}

func (v NullableV1MetaQueryFieldsInner) Get() *V1MetaQueryFieldsInner {
	return v.value
}

func (v *NullableV1MetaQueryFieldsInner) Set(val *V1MetaQueryFieldsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1MetaQueryFieldsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1MetaQueryFieldsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1MetaQueryFieldsInner(val *V1MetaQueryFieldsInner) *NullableV1MetaQueryFieldsInner {
	return &NullableV1MetaQueryFieldsInner{value: val, isSet: true}
}

func (v NullableV1MetaQueryFieldsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1MetaQueryFieldsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


