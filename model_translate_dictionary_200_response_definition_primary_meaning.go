/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateDictionary200ResponseDefinitionPrimaryMeaning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateDictionary200ResponseDefinitionPrimaryMeaning{}

// TranslateDictionary200ResponseDefinitionPrimaryMeaning The primary or most common meaning
type TranslateDictionary200ResponseDefinitionPrimaryMeaning struct {
	// The text of the primary definition (translated to definition_language)
	Definition *string `json:"definition,omitempty"`
	// The part(s) of speech that apply to this specific meaning (translated to definition_language)
	PartOfSpeech []string `json:"part_of_speech,omitempty"`
	// Register or context where this specific meaning is used (formal, informal, slang, technical, etc.) - translated to definition_language
	UsageLevel []string `json:"usage_level,omitempty"`
	// Specific dialects where this meaning is used (e.g., \"US\", \"UK\", \"Australian\")
	Dialect []string `json:"dialect,omitempty"`
	// List of synonyms for this meaning, ordered from strongest/closest to least similar (remains in word_language)
	Synonyms []string `json:"synonyms,omitempty"`
}

// NewTranslateDictionary200ResponseDefinitionPrimaryMeaning instantiates a new TranslateDictionary200ResponseDefinitionPrimaryMeaning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDictionary200ResponseDefinitionPrimaryMeaning() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	this := TranslateDictionary200ResponseDefinitionPrimaryMeaning{}
	return &this
}

// NewTranslateDictionary200ResponseDefinitionPrimaryMeaningWithDefaults instantiates a new TranslateDictionary200ResponseDefinitionPrimaryMeaning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDictionary200ResponseDefinitionPrimaryMeaningWithDefaults() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	this := TranslateDictionary200ResponseDefinitionPrimaryMeaning{}
	return &this
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetDefinition(v string) {
	o.Definition = &v
}

// GetPartOfSpeech returns the PartOfSpeech field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetPartOfSpeech() []string {
	if o == nil || IsNil(o.PartOfSpeech) {
		var ret []string
		return ret
	}
	return o.PartOfSpeech
}

// GetPartOfSpeechOk returns a tuple with the PartOfSpeech field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetPartOfSpeechOk() ([]string, bool) {
	if o == nil || IsNil(o.PartOfSpeech) {
		return nil, false
	}
	return o.PartOfSpeech, true
}

// HasPartOfSpeech returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasPartOfSpeech() bool {
	if o != nil && !IsNil(o.PartOfSpeech) {
		return true
	}

	return false
}

// SetPartOfSpeech gets a reference to the given []string and assigns it to the PartOfSpeech field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetPartOfSpeech(v []string) {
	o.PartOfSpeech = v
}

// GetUsageLevel returns the UsageLevel field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetUsageLevel() []string {
	if o == nil || IsNil(o.UsageLevel) {
		var ret []string
		return ret
	}
	return o.UsageLevel
}

// GetUsageLevelOk returns a tuple with the UsageLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetUsageLevelOk() ([]string, bool) {
	if o == nil || IsNil(o.UsageLevel) {
		return nil, false
	}
	return o.UsageLevel, true
}

// HasUsageLevel returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasUsageLevel() bool {
	if o != nil && !IsNil(o.UsageLevel) {
		return true
	}

	return false
}

// SetUsageLevel gets a reference to the given []string and assigns it to the UsageLevel field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetUsageLevel(v []string) {
	o.UsageLevel = v
}

// GetDialect returns the Dialect field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDialect() []string {
	if o == nil || IsNil(o.Dialect) {
		var ret []string
		return ret
	}
	return o.Dialect
}

// GetDialectOk returns a tuple with the Dialect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDialectOk() ([]string, bool) {
	if o == nil || IsNil(o.Dialect) {
		return nil, false
	}
	return o.Dialect, true
}

// HasDialect returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasDialect() bool {
	if o != nil && !IsNil(o.Dialect) {
		return true
	}

	return false
}

// SetDialect gets a reference to the given []string and assigns it to the Dialect field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetDialect(v []string) {
	o.Dialect = v
}

// GetSynonyms returns the Synonyms field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetSynonyms() []string {
	if o == nil || IsNil(o.Synonyms) {
		var ret []string
		return ret
	}
	return o.Synonyms
}

// GetSynonymsOk returns a tuple with the Synonyms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetSynonymsOk() ([]string, bool) {
	if o == nil || IsNil(o.Synonyms) {
		return nil, false
	}
	return o.Synonyms, true
}

// HasSynonyms returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasSynonyms() bool {
	if o != nil && !IsNil(o.Synonyms) {
		return true
	}

	return false
}

// SetSynonyms gets a reference to the given []string and assigns it to the Synonyms field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetSynonyms(v []string) {
	o.Synonyms = v
}

func (o TranslateDictionary200ResponseDefinitionPrimaryMeaning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateDictionary200ResponseDefinitionPrimaryMeaning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.PartOfSpeech) {
		toSerialize["part_of_speech"] = o.PartOfSpeech
	}
	if !IsNil(o.UsageLevel) {
		toSerialize["usage_level"] = o.UsageLevel
	}
	if !IsNil(o.Dialect) {
		toSerialize["dialect"] = o.Dialect
	}
	if !IsNil(o.Synonyms) {
		toSerialize["synonyms"] = o.Synonyms
	}
	return toSerialize, nil
}

type NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning struct {
	value *TranslateDictionary200ResponseDefinitionPrimaryMeaning
	isSet bool
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Get() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	return v.value
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Set(val *TranslateDictionary200ResponseDefinitionPrimaryMeaning) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDictionary200ResponseDefinitionPrimaryMeaning(val *TranslateDictionary200ResponseDefinitionPrimaryMeaning) *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning {
	return &NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning{value: val, isSet: true}
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


