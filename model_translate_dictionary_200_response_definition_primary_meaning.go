/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateDictionary200ResponseDefinitionPrimaryMeaning type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateDictionary200ResponseDefinitionPrimaryMeaning{}

// TranslateDictionary200ResponseDefinitionPrimaryMeaning The primary or most common meaning
type TranslateDictionary200ResponseDefinitionPrimaryMeaning struct {
	// The text of the primary definition
	Definition *string `json:"definition,omitempty"`
	// The part(s) of speech that apply to this specific meaning
	PartOfSpeech []string `json:"part_of_speech,omitempty"`
}

// NewTranslateDictionary200ResponseDefinitionPrimaryMeaning instantiates a new TranslateDictionary200ResponseDefinitionPrimaryMeaning object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateDictionary200ResponseDefinitionPrimaryMeaning() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	this := TranslateDictionary200ResponseDefinitionPrimaryMeaning{}
	return &this
}

// NewTranslateDictionary200ResponseDefinitionPrimaryMeaningWithDefaults instantiates a new TranslateDictionary200ResponseDefinitionPrimaryMeaning object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateDictionary200ResponseDefinitionPrimaryMeaningWithDefaults() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	this := TranslateDictionary200ResponseDefinitionPrimaryMeaning{}
	return &this
}

// GetDefinition returns the Definition field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDefinition() string {
	if o == nil || IsNil(o.Definition) {
		var ret string
		return ret
	}
	return *o.Definition
}

// GetDefinitionOk returns a tuple with the Definition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetDefinitionOk() (*string, bool) {
	if o == nil || IsNil(o.Definition) {
		return nil, false
	}
	return o.Definition, true
}

// HasDefinition returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasDefinition() bool {
	if o != nil && !IsNil(o.Definition) {
		return true
	}

	return false
}

// SetDefinition gets a reference to the given string and assigns it to the Definition field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetDefinition(v string) {
	o.Definition = &v
}

// GetPartOfSpeech returns the PartOfSpeech field value if set, zero value otherwise.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetPartOfSpeech() []string {
	if o == nil || IsNil(o.PartOfSpeech) {
		var ret []string
		return ret
	}
	return o.PartOfSpeech
}

// GetPartOfSpeechOk returns a tuple with the PartOfSpeech field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) GetPartOfSpeechOk() ([]string, bool) {
	if o == nil || IsNil(o.PartOfSpeech) {
		return nil, false
	}
	return o.PartOfSpeech, true
}

// HasPartOfSpeech returns a boolean if a field has been set.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) HasPartOfSpeech() bool {
	if o != nil && !IsNil(o.PartOfSpeech) {
		return true
	}

	return false
}

// SetPartOfSpeech gets a reference to the given []string and assigns it to the PartOfSpeech field.
func (o *TranslateDictionary200ResponseDefinitionPrimaryMeaning) SetPartOfSpeech(v []string) {
	o.PartOfSpeech = v
}

func (o TranslateDictionary200ResponseDefinitionPrimaryMeaning) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateDictionary200ResponseDefinitionPrimaryMeaning) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Definition) {
		toSerialize["definition"] = o.Definition
	}
	if !IsNil(o.PartOfSpeech) {
		toSerialize["part_of_speech"] = o.PartOfSpeech
	}
	return toSerialize, nil
}

type NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning struct {
	value *TranslateDictionary200ResponseDefinitionPrimaryMeaning
	isSet bool
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Get() *TranslateDictionary200ResponseDefinitionPrimaryMeaning {
	return v.value
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Set(val *TranslateDictionary200ResponseDefinitionPrimaryMeaning) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateDictionary200ResponseDefinitionPrimaryMeaning(val *TranslateDictionary200ResponseDefinitionPrimaryMeaning) *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning {
	return &NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning{value: val, isSet: true}
}

func (v NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateDictionary200ResponseDefinitionPrimaryMeaning) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


