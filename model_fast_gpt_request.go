/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FastGPTRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FastGPTRequest{}

// FastGPTRequest Used to upload the query to FastGPT
type FastGPTRequest struct {
	Query string `json:"query"`
	Cache *bool `json:"cache,omitempty"`
}

type _FastGPTRequest FastGPTRequest

// NewFastGPTRequest instantiates a new FastGPTRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFastGPTRequest(query string) *FastGPTRequest {
	this := FastGPTRequest{}
	this.Query = query
	var cache bool = true
	this.Cache = &cache
	return &this
}

// NewFastGPTRequestWithDefaults instantiates a new FastGPTRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFastGPTRequestWithDefaults() *FastGPTRequest {
	this := FastGPTRequest{}
	var cache bool = true
	this.Cache = &cache
	return &this
}

// GetQuery returns the Query field value
func (o *FastGPTRequest) GetQuery() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Query
}

// GetQueryOk returns a tuple with the Query field value
// and a boolean to check if the value has been set.
func (o *FastGPTRequest) GetQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Query, true
}

// SetQuery sets field value
func (o *FastGPTRequest) SetQuery(v string) {
	o.Query = v
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *FastGPTRequest) GetCache() bool {
	if o == nil || IsNil(o.Cache) {
		var ret bool
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FastGPTRequest) GetCacheOk() (*bool, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *FastGPTRequest) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given bool and assigns it to the Cache field.
func (o *FastGPTRequest) SetCache(v bool) {
	o.Cache = &v
}

func (o FastGPTRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FastGPTRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["query"] = o.Query
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	return toSerialize, nil
}

func (o *FastGPTRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"query",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFastGPTRequest := _FastGPTRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFastGPTRequest)

	if err != nil {
		return err
	}

	*o = FastGPTRequest(varFastGPTRequest)

	return err
}

type NullableFastGPTRequest struct {
	value *FastGPTRequest
	isSet bool
}

func (v NullableFastGPTRequest) Get() *FastGPTRequest {
	return v.value
}

func (v *NullableFastGPTRequest) Set(val *FastGPTRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFastGPTRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFastGPTRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFastGPTRequest(val *FastGPTRequest) *NullableFastGPTRequest {
	return &NullableFastGPTRequest{value: val, isSet: true}
}

func (v NullableFastGPTRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFastGPTRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


