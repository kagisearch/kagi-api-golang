/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchObject{}

// SearchObject struct for SearchObject
type SearchObject struct {
	T *int32 `json:"t,omitempty"`
	Rank *int32 `json:"rank,omitempty"`
	Url string `json:"url"`
	Title string `json:"title"`
	Snippet *string `json:"snippet,omitempty"`
	Published *string `json:"published,omitempty"`
	Thumbnail *V1ResultSearchImage `json:"thumbnail,omitempty"`
	Image *V1ResultSearchImage `json:"image,omitempty"`
}

type _SearchObject SearchObject

// NewSearchObject instantiates a new SearchObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchObject(url string, title string) *SearchObject {
	this := SearchObject{}
	this.Url = url
	this.Title = title
	return &this
}

// NewSearchObjectWithDefaults instantiates a new SearchObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchObjectWithDefaults() *SearchObject {
	this := SearchObject{}
	return &this
}

// GetT returns the T field value if set, zero value otherwise.
func (o *SearchObject) GetT() int32 {
	if o == nil || IsNil(o.T) {
		var ret int32
		return ret
	}
	return *o.T
}

// GetTOk returns a tuple with the T field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetTOk() (*int32, bool) {
	if o == nil || IsNil(o.T) {
		return nil, false
	}
	return o.T, true
}

// HasT returns a boolean if a field has been set.
func (o *SearchObject) HasT() bool {
	if o != nil && !IsNil(o.T) {
		return true
	}

	return false
}

// SetT gets a reference to the given int32 and assigns it to the T field.
func (o *SearchObject) SetT(v int32) {
	o.T = &v
}

// GetRank returns the Rank field value if set, zero value otherwise.
func (o *SearchObject) GetRank() int32 {
	if o == nil || IsNil(o.Rank) {
		var ret int32
		return ret
	}
	return *o.Rank
}

// GetRankOk returns a tuple with the Rank field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetRankOk() (*int32, bool) {
	if o == nil || IsNil(o.Rank) {
		return nil, false
	}
	return o.Rank, true
}

// HasRank returns a boolean if a field has been set.
func (o *SearchObject) HasRank() bool {
	if o != nil && !IsNil(o.Rank) {
		return true
	}

	return false
}

// SetRank gets a reference to the given int32 and assigns it to the Rank field.
func (o *SearchObject) SetRank(v int32) {
	o.Rank = &v
}

// GetUrl returns the Url field value
func (o *SearchObject) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *SearchObject) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *SearchObject) SetUrl(v string) {
	o.Url = v
}

// GetTitle returns the Title field value
func (o *SearchObject) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *SearchObject) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *SearchObject) SetTitle(v string) {
	o.Title = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *SearchObject) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *SearchObject) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *SearchObject) SetSnippet(v string) {
	o.Snippet = &v
}

// GetPublished returns the Published field value if set, zero value otherwise.
func (o *SearchObject) GetPublished() string {
	if o == nil || IsNil(o.Published) {
		var ret string
		return ret
	}
	return *o.Published
}

// GetPublishedOk returns a tuple with the Published field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetPublishedOk() (*string, bool) {
	if o == nil || IsNil(o.Published) {
		return nil, false
	}
	return o.Published, true
}

// HasPublished returns a boolean if a field has been set.
func (o *SearchObject) HasPublished() bool {
	if o != nil && !IsNil(o.Published) {
		return true
	}

	return false
}

// SetPublished gets a reference to the given string and assigns it to the Published field.
func (o *SearchObject) SetPublished(v string) {
	o.Published = &v
}

// GetThumbnail returns the Thumbnail field value if set, zero value otherwise.
func (o *SearchObject) GetThumbnail() V1ResultSearchImage {
	if o == nil || IsNil(o.Thumbnail) {
		var ret V1ResultSearchImage
		return ret
	}
	return *o.Thumbnail
}

// GetThumbnailOk returns a tuple with the Thumbnail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetThumbnailOk() (*V1ResultSearchImage, bool) {
	if o == nil || IsNil(o.Thumbnail) {
		return nil, false
	}
	return o.Thumbnail, true
}

// HasThumbnail returns a boolean if a field has been set.
func (o *SearchObject) HasThumbnail() bool {
	if o != nil && !IsNil(o.Thumbnail) {
		return true
	}

	return false
}

// SetThumbnail gets a reference to the given V1ResultSearchImage and assigns it to the Thumbnail field.
func (o *SearchObject) SetThumbnail(v V1ResultSearchImage) {
	o.Thumbnail = &v
}

// GetImage returns the Image field value if set, zero value otherwise.
func (o *SearchObject) GetImage() V1ResultSearchImage {
	if o == nil || IsNil(o.Image) {
		var ret V1ResultSearchImage
		return ret
	}
	return *o.Image
}

// GetImageOk returns a tuple with the Image field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchObject) GetImageOk() (*V1ResultSearchImage, bool) {
	if o == nil || IsNil(o.Image) {
		return nil, false
	}
	return o.Image, true
}

// HasImage returns a boolean if a field has been set.
func (o *SearchObject) HasImage() bool {
	if o != nil && !IsNil(o.Image) {
		return true
	}

	return false
}

// SetImage gets a reference to the given V1ResultSearchImage and assigns it to the Image field.
func (o *SearchObject) SetImage(v V1ResultSearchImage) {
	o.Image = &v
}

func (o SearchObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.T) {
		toSerialize["t"] = o.T
	}
	if !IsNil(o.Rank) {
		toSerialize["rank"] = o.Rank
	}
	toSerialize["url"] = o.Url
	toSerialize["title"] = o.Title
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Published) {
		toSerialize["published"] = o.Published
	}
	if !IsNil(o.Thumbnail) {
		toSerialize["thumbnail"] = o.Thumbnail
	}
	if !IsNil(o.Image) {
		toSerialize["image"] = o.Image
	}
	return toSerialize, nil
}

func (o *SearchObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"url",
		"title",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchObject := _SearchObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchObject)

	if err != nil {
		return err
	}

	*o = SearchObject(varSearchObject)

	return err
}

type NullableSearchObject struct {
	value *SearchObject
	isSet bool
}

func (v NullableSearchObject) Get() *SearchObject {
	return v.value
}

func (v *NullableSearchObject) Set(val *SearchObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchObject(val *SearchObject) *NullableSearchObject {
	return &NullableSearchObject{value: val, isSet: true}
}

func (v NullableSearchObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


