/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the V1Meta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1Meta{}

// V1Meta struct for V1Meta
type V1Meta struct {
	Trace string `json:"trace"`
	Node string `json:"node"`
	Ms int32 `json:"ms"`
	Query *V1MetaQuery `json:"query,omitempty"`
}

type _V1Meta V1Meta

// NewV1Meta instantiates a new V1Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1Meta(trace string, node string, ms int32) *V1Meta {
	this := V1Meta{}
	this.Trace = trace
	this.Node = node
	this.Ms = ms
	return &this
}

// NewV1MetaWithDefaults instantiates a new V1Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1MetaWithDefaults() *V1Meta {
	this := V1Meta{}
	return &this
}

// GetTrace returns the Trace field value
func (o *V1Meta) GetTrace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Trace
}

// GetTraceOk returns a tuple with the Trace field value
// and a boolean to check if the value has been set.
func (o *V1Meta) GetTraceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Trace, true
}

// SetTrace sets field value
func (o *V1Meta) SetTrace(v string) {
	o.Trace = v
}

// GetNode returns the Node field value
func (o *V1Meta) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *V1Meta) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *V1Meta) SetNode(v string) {
	o.Node = v
}

// GetMs returns the Ms field value
func (o *V1Meta) GetMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ms
}

// GetMsOk returns a tuple with the Ms field value
// and a boolean to check if the value has been set.
func (o *V1Meta) GetMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ms, true
}

// SetMs sets field value
func (o *V1Meta) SetMs(v int32) {
	o.Ms = v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *V1Meta) GetQuery() V1MetaQuery {
	if o == nil || IsNil(o.Query) {
		var ret V1MetaQuery
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1Meta) GetQueryOk() (*V1MetaQuery, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *V1Meta) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given V1MetaQuery and assigns it to the Query field.
func (o *V1Meta) SetQuery(v V1MetaQuery) {
	o.Query = &v
}

func (o V1Meta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1Meta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["trace"] = o.Trace
	toSerialize["node"] = o.Node
	toSerialize["ms"] = o.Ms
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

func (o *V1Meta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"trace",
		"node",
		"ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1Meta := _V1Meta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varV1Meta)

	if err != nil {
		return err
	}

	*o = V1Meta(varV1Meta)

	return err
}

type NullableV1Meta struct {
	value *V1Meta
	isSet bool
}

func (v NullableV1Meta) Get() *V1Meta {
	return v.value
}

func (v *NullableV1Meta) Set(val *V1Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableV1Meta) IsSet() bool {
	return v.isSet
}

func (v *NullableV1Meta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1Meta(val *V1Meta) *NullableV1Meta {
	return &NullableV1Meta{value: val, isSet: true}
}

func (v NullableV1Meta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1Meta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


