/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SuperSearch200ResponseData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SuperSearch200ResponseData{}

// SuperSearch200ResponseData struct for SuperSearch200ResponseData
type SuperSearch200ResponseData struct {
	Search []ResultSearch `json:"search,omitempty"`
	Video []ResultVideo `json:"video,omitempty"`
	AdjacentQuestion []ResultAdjacentQuestion `json:"adjacent_question,omitempty"`
	Infobox []ResultInfobox `json:"infobox,omitempty"`
	WebArchive []ResultWebArchive `json:"web_archive,omitempty"`
}

// NewSuperSearch200ResponseData instantiates a new SuperSearch200ResponseData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSuperSearch200ResponseData() *SuperSearch200ResponseData {
	this := SuperSearch200ResponseData{}
	return &this
}

// NewSuperSearch200ResponseDataWithDefaults instantiates a new SuperSearch200ResponseData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSuperSearch200ResponseDataWithDefaults() *SuperSearch200ResponseData {
	this := SuperSearch200ResponseData{}
	return &this
}

// GetSearch returns the Search field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetSearch() []ResultSearch {
	if o == nil || IsNil(o.Search) {
		var ret []ResultSearch
		return ret
	}
	return o.Search
}

// GetSearchOk returns a tuple with the Search field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetSearchOk() ([]ResultSearch, bool) {
	if o == nil || IsNil(o.Search) {
		return nil, false
	}
	return o.Search, true
}

// HasSearch returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasSearch() bool {
	if o != nil && !IsNil(o.Search) {
		return true
	}

	return false
}

// SetSearch gets a reference to the given []ResultSearch and assigns it to the Search field.
func (o *SuperSearch200ResponseData) SetSearch(v []ResultSearch) {
	o.Search = v
}

// GetVideo returns the Video field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetVideo() []ResultVideo {
	if o == nil || IsNil(o.Video) {
		var ret []ResultVideo
		return ret
	}
	return o.Video
}

// GetVideoOk returns a tuple with the Video field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetVideoOk() ([]ResultVideo, bool) {
	if o == nil || IsNil(o.Video) {
		return nil, false
	}
	return o.Video, true
}

// HasVideo returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasVideo() bool {
	if o != nil && !IsNil(o.Video) {
		return true
	}

	return false
}

// SetVideo gets a reference to the given []ResultVideo and assigns it to the Video field.
func (o *SuperSearch200ResponseData) SetVideo(v []ResultVideo) {
	o.Video = v
}

// GetAdjacentQuestion returns the AdjacentQuestion field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetAdjacentQuestion() []ResultAdjacentQuestion {
	if o == nil || IsNil(o.AdjacentQuestion) {
		var ret []ResultAdjacentQuestion
		return ret
	}
	return o.AdjacentQuestion
}

// GetAdjacentQuestionOk returns a tuple with the AdjacentQuestion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetAdjacentQuestionOk() ([]ResultAdjacentQuestion, bool) {
	if o == nil || IsNil(o.AdjacentQuestion) {
		return nil, false
	}
	return o.AdjacentQuestion, true
}

// HasAdjacentQuestion returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasAdjacentQuestion() bool {
	if o != nil && !IsNil(o.AdjacentQuestion) {
		return true
	}

	return false
}

// SetAdjacentQuestion gets a reference to the given []ResultAdjacentQuestion and assigns it to the AdjacentQuestion field.
func (o *SuperSearch200ResponseData) SetAdjacentQuestion(v []ResultAdjacentQuestion) {
	o.AdjacentQuestion = v
}

// GetInfobox returns the Infobox field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetInfobox() []ResultInfobox {
	if o == nil || IsNil(o.Infobox) {
		var ret []ResultInfobox
		return ret
	}
	return o.Infobox
}

// GetInfoboxOk returns a tuple with the Infobox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetInfoboxOk() ([]ResultInfobox, bool) {
	if o == nil || IsNil(o.Infobox) {
		return nil, false
	}
	return o.Infobox, true
}

// HasInfobox returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasInfobox() bool {
	if o != nil && !IsNil(o.Infobox) {
		return true
	}

	return false
}

// SetInfobox gets a reference to the given []ResultInfobox and assigns it to the Infobox field.
func (o *SuperSearch200ResponseData) SetInfobox(v []ResultInfobox) {
	o.Infobox = v
}

// GetWebArchive returns the WebArchive field value if set, zero value otherwise.
func (o *SuperSearch200ResponseData) GetWebArchive() []ResultWebArchive {
	if o == nil || IsNil(o.WebArchive) {
		var ret []ResultWebArchive
		return ret
	}
	return o.WebArchive
}

// GetWebArchiveOk returns a tuple with the WebArchive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SuperSearch200ResponseData) GetWebArchiveOk() ([]ResultWebArchive, bool) {
	if o == nil || IsNil(o.WebArchive) {
		return nil, false
	}
	return o.WebArchive, true
}

// HasWebArchive returns a boolean if a field has been set.
func (o *SuperSearch200ResponseData) HasWebArchive() bool {
	if o != nil && !IsNil(o.WebArchive) {
		return true
	}

	return false
}

// SetWebArchive gets a reference to the given []ResultWebArchive and assigns it to the WebArchive field.
func (o *SuperSearch200ResponseData) SetWebArchive(v []ResultWebArchive) {
	o.WebArchive = v
}

func (o SuperSearch200ResponseData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SuperSearch200ResponseData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Search) {
		toSerialize["search"] = o.Search
	}
	if !IsNil(o.Video) {
		toSerialize["video"] = o.Video
	}
	if !IsNil(o.AdjacentQuestion) {
		toSerialize["adjacent_question"] = o.AdjacentQuestion
	}
	if !IsNil(o.Infobox) {
		toSerialize["infobox"] = o.Infobox
	}
	if !IsNil(o.WebArchive) {
		toSerialize["web_archive"] = o.WebArchive
	}
	return toSerialize, nil
}

type NullableSuperSearch200ResponseData struct {
	value *SuperSearch200ResponseData
	isSet bool
}

func (v NullableSuperSearch200ResponseData) Get() *SuperSearch200ResponseData {
	return v.value
}

func (v *NullableSuperSearch200ResponseData) Set(val *SuperSearch200ResponseData) {
	v.value = val
	v.isSet = true
}

func (v NullableSuperSearch200ResponseData) IsSet() bool {
	return v.isSet
}

func (v *NullableSuperSearch200ResponseData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSuperSearch200ResponseData(val *SuperSearch200ResponseData) *NullableSuperSearch200ResponseData {
	return &NullableSuperSearch200ResponseData{value: val, isSet: true}
}

func (v NullableSuperSearch200ResponseData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSuperSearch200ResponseData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


