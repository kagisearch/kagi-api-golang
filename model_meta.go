/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Meta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Meta{}

// Meta struct for Meta
type Meta struct {
	Id string `json:"id"`
	Node string `json:"node"`
	Ms int32 `json:"ms"`
	ApiBalance *float32 `json:"api_balance,omitempty"`
}

type _Meta Meta

// NewMeta instantiates a new Meta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMeta(id string, node string, ms int32) *Meta {
	this := Meta{}
	this.Id = id
	this.Node = node
	this.Ms = ms
	return &this
}

// NewMetaWithDefaults instantiates a new Meta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetaWithDefaults() *Meta {
	this := Meta{}
	return &this
}

// GetId returns the Id field value
func (o *Meta) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Meta) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Meta) SetId(v string) {
	o.Id = v
}

// GetNode returns the Node field value
func (o *Meta) GetNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Node
}

// GetNodeOk returns a tuple with the Node field value
// and a boolean to check if the value has been set.
func (o *Meta) GetNodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Node, true
}

// SetNode sets field value
func (o *Meta) SetNode(v string) {
	o.Node = v
}

// GetMs returns the Ms field value
func (o *Meta) GetMs() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Ms
}

// GetMsOk returns a tuple with the Ms field value
// and a boolean to check if the value has been set.
func (o *Meta) GetMsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ms, true
}

// SetMs sets field value
func (o *Meta) SetMs(v int32) {
	o.Ms = v
}

// GetApiBalance returns the ApiBalance field value if set, zero value otherwise.
func (o *Meta) GetApiBalance() float32 {
	if o == nil || IsNil(o.ApiBalance) {
		var ret float32
		return ret
	}
	return *o.ApiBalance
}

// GetApiBalanceOk returns a tuple with the ApiBalance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Meta) GetApiBalanceOk() (*float32, bool) {
	if o == nil || IsNil(o.ApiBalance) {
		return nil, false
	}
	return o.ApiBalance, true
}

// HasApiBalance returns a boolean if a field has been set.
func (o *Meta) HasApiBalance() bool {
	if o != nil && !IsNil(o.ApiBalance) {
		return true
	}

	return false
}

// SetApiBalance gets a reference to the given float32 and assigns it to the ApiBalance field.
func (o *Meta) SetApiBalance(v float32) {
	o.ApiBalance = &v
}

func (o Meta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Meta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["node"] = o.Node
	toSerialize["ms"] = o.Ms
	if !IsNil(o.ApiBalance) {
		toSerialize["api_balance"] = o.ApiBalance
	}
	return toSerialize, nil
}

func (o *Meta) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"node",
		"ms",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMeta := _Meta{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMeta)

	if err != nil {
		return err
	}

	*o = Meta(varMeta)

	return err
}

type NullableMeta struct {
	value *Meta
	isSet bool
}

func (v NullableMeta) Get() *Meta {
	return v.value
}

func (v *NullableMeta) Set(val *Meta) {
	v.value = val
	v.isSet = true
}

func (v NullableMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMeta(val *Meta) *NullableMeta {
	return &NullableMeta{value: val, isSet: true}
}

func (v NullableMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


