/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TranslateProofReadRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateProofReadRequest{}

// TranslateProofReadRequest struct for TranslateProofReadRequest
type TranslateProofReadRequest struct {
	// Text content to proofread
	Text string `json:"text"`
	// Source language code (ISO-639) or \"auto\" for automatic detection
	SourceLang *string `json:"source_lang,omitempty"`
	// Language code (ISO-639) for explanations and analysis. If not provided, explanations will be in the same language as the source text.
	ExplanationLanguage *string `json:"explanation_language,omitempty"`
	// Whether to stream the response as Server-Sent Events
	Stream *bool `json:"stream,omitempty"`
}

type _TranslateProofReadRequest TranslateProofReadRequest

// NewTranslateProofReadRequest instantiates a new TranslateProofReadRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateProofReadRequest(text string) *TranslateProofReadRequest {
	this := TranslateProofReadRequest{}
	this.Text = text
	var sourceLang string = "auto"
	this.SourceLang = &sourceLang
	var stream bool = false
	this.Stream = &stream
	return &this
}

// NewTranslateProofReadRequestWithDefaults instantiates a new TranslateProofReadRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateProofReadRequestWithDefaults() *TranslateProofReadRequest {
	this := TranslateProofReadRequest{}
	var sourceLang string = "auto"
	this.SourceLang = &sourceLang
	var stream bool = false
	this.Stream = &stream
	return &this
}

// GetText returns the Text field value
func (o *TranslateProofReadRequest) GetText() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TranslateProofReadRequest) GetTextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TranslateProofReadRequest) SetText(v string) {
	o.Text = v
}

// GetSourceLang returns the SourceLang field value if set, zero value otherwise.
func (o *TranslateProofReadRequest) GetSourceLang() string {
	if o == nil || IsNil(o.SourceLang) {
		var ret string
		return ret
	}
	return *o.SourceLang
}

// GetSourceLangOk returns a tuple with the SourceLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateProofReadRequest) GetSourceLangOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLang) {
		return nil, false
	}
	return o.SourceLang, true
}

// HasSourceLang returns a boolean if a field has been set.
func (o *TranslateProofReadRequest) HasSourceLang() bool {
	if o != nil && !IsNil(o.SourceLang) {
		return true
	}

	return false
}

// SetSourceLang gets a reference to the given string and assigns it to the SourceLang field.
func (o *TranslateProofReadRequest) SetSourceLang(v string) {
	o.SourceLang = &v
}

// GetExplanationLanguage returns the ExplanationLanguage field value if set, zero value otherwise.
func (o *TranslateProofReadRequest) GetExplanationLanguage() string {
	if o == nil || IsNil(o.ExplanationLanguage) {
		var ret string
		return ret
	}
	return *o.ExplanationLanguage
}

// GetExplanationLanguageOk returns a tuple with the ExplanationLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateProofReadRequest) GetExplanationLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.ExplanationLanguage) {
		return nil, false
	}
	return o.ExplanationLanguage, true
}

// HasExplanationLanguage returns a boolean if a field has been set.
func (o *TranslateProofReadRequest) HasExplanationLanguage() bool {
	if o != nil && !IsNil(o.ExplanationLanguage) {
		return true
	}

	return false
}

// SetExplanationLanguage gets a reference to the given string and assigns it to the ExplanationLanguage field.
func (o *TranslateProofReadRequest) SetExplanationLanguage(v string) {
	o.ExplanationLanguage = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *TranslateProofReadRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateProofReadRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *TranslateProofReadRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *TranslateProofReadRequest) SetStream(v bool) {
	o.Stream = &v
}

func (o TranslateProofReadRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateProofReadRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.SourceLang) {
		toSerialize["source_lang"] = o.SourceLang
	}
	if !IsNil(o.ExplanationLanguage) {
		toSerialize["explanation_language"] = o.ExplanationLanguage
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	return toSerialize, nil
}

func (o *TranslateProofReadRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTranslateProofReadRequest := _TranslateProofReadRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTranslateProofReadRequest)

	if err != nil {
		return err
	}

	*o = TranslateProofReadRequest(varTranslateProofReadRequest)

	return err
}

type NullableTranslateProofReadRequest struct {
	value *TranslateProofReadRequest
	isSet bool
}

func (v NullableTranslateProofReadRequest) Get() *TranslateProofReadRequest {
	return v.value
}

func (v *NullableTranslateProofReadRequest) Set(val *TranslateProofReadRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateProofReadRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateProofReadRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateProofReadRequest(val *TranslateProofReadRequest) *NullableTranslateProofReadRequest {
	return &NullableTranslateProofReadRequest{value: val, isSet: true}
}

func (v NullableTranslateProofReadRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateProofReadRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


