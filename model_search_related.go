/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchRelated type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRelated{}

// SearchRelated struct for SearchRelated
type SearchRelated struct {
	T int32 `json:"t"`
	List []string `json:"list"`
}

type _SearchRelated SearchRelated

// NewSearchRelated instantiates a new SearchRelated object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRelated(t int32, list []string) *SearchRelated {
	this := SearchRelated{}
	this.T = t
	this.List = list
	return &this
}

// NewSearchRelatedWithDefaults instantiates a new SearchRelated object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRelatedWithDefaults() *SearchRelated {
	this := SearchRelated{}
	return &this
}

// GetT returns the T field value
func (o *SearchRelated) GetT() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.T
}

// GetTOk returns a tuple with the T field value
// and a boolean to check if the value has been set.
func (o *SearchRelated) GetTOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.T, true
}

// SetT sets field value
func (o *SearchRelated) SetT(v int32) {
	o.T = v
}

// GetList returns the List field value
func (o *SearchRelated) GetList() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.List
}

// GetListOk returns a tuple with the List field value
// and a boolean to check if the value has been set.
func (o *SearchRelated) GetListOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.List, true
}

// SetList sets field value
func (o *SearchRelated) SetList(v []string) {
	o.List = v
}

func (o SearchRelated) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRelated) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["t"] = o.T
	toSerialize["list"] = o.List
	return toSerialize, nil
}

func (o *SearchRelated) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"t",
		"list",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchRelated := _SearchRelated{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchRelated)

	if err != nil {
		return err
	}

	*o = SearchRelated(varSearchRelated)

	return err
}

type NullableSearchRelated struct {
	value *SearchRelated
	isSet bool
}

func (v NullableSearchRelated) Get() *SearchRelated {
	return v.value
}

func (v *NullableSearchRelated) Set(val *SearchRelated) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRelated) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRelated) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRelated(val *SearchRelated) *NullableSearchRelated {
	return &NullableSearchRelated{value: val, isSet: true}
}

func (v NullableSearchRelated) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRelated) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


