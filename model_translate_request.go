/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TranslateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateRequest{}

// TranslateRequest struct for TranslateRequest
type TranslateRequest struct {
	Text TranslateRequestText `json:"text"`
	// Source language code (ISO-639) or \"auto\" for automatic detection
	SourceLang *string `json:"source_lang,omitempty"`
	// Target language code (ISO-639)
	TargetLang *string `json:"target_lang,omitempty"`
	// Legacy parameter for source language (use source_lang instead)
	// Deprecated
	From *string `json:"from,omitempty"`
	// Legacy parameter for target language (use target_lang instead)
	// Deprecated
	To *string `json:"to,omitempty"`
	// Additional context to improve translation accuracy
	Context *string `json:"context,omitempty"`
	// Whether to preserve original text formatting
	PreserveFormatting *bool `json:"preserve_formatting,omitempty"`
	// Level of formality in translation. All formality levels are supported for all language pairs. 'prefer_more' is same as 'more', and 'prefer_less' is same as 'less' (included for backwards compatibility).
	Formality *string `json:"formality,omitempty"`
	// Gender of the speaker for languages with gender-specific expressions
	SpeakerGender *string `json:"speaker_gender,omitempty"`
	// Gender of the addressee for languages with gender-specific expressions
	AddresseeGender *string `json:"addressee_gender,omitempty"`
	// Style of translation (natural for fluency, literal for exactness)
	TranslationStyle *string `json:"translation_style,omitempty"`
	// Pre-detected source language (if available)
	PredictedLanguage *string `json:"predicted_language,omitempty"`
	// Pre-generated translation (if available)
	Prediction *string `json:"prediction,omitempty"`
	// Whether to stream the response as Server-Sent Events
	Stream *bool `json:"stream,omitempty"`
	// Language code for dictionary definitions (if not provided, the source language will be used)
	DictionaryLanguage *string `json:"dictionary_language,omitempty"`
}

type _TranslateRequest TranslateRequest

// NewTranslateRequest instantiates a new TranslateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateRequest(text TranslateRequestText) *TranslateRequest {
	this := TranslateRequest{}
	this.Text = text
	var sourceLang string = "auto"
	this.SourceLang = &sourceLang
	var targetLang string = "en"
	this.TargetLang = &targetLang
	var preserveFormatting bool = false
	this.PreserveFormatting = &preserveFormatting
	var formality string = "default"
	this.Formality = &formality
	var speakerGender string = "unknown"
	this.SpeakerGender = &speakerGender
	var addresseeGender string = "unknown"
	this.AddresseeGender = &addresseeGender
	var translationStyle string = "natural"
	this.TranslationStyle = &translationStyle
	var stream bool = false
	this.Stream = &stream
	return &this
}

// NewTranslateRequestWithDefaults instantiates a new TranslateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateRequestWithDefaults() *TranslateRequest {
	this := TranslateRequest{}
	var sourceLang string = "auto"
	this.SourceLang = &sourceLang
	var targetLang string = "en"
	this.TargetLang = &targetLang
	var preserveFormatting bool = false
	this.PreserveFormatting = &preserveFormatting
	var formality string = "default"
	this.Formality = &formality
	var speakerGender string = "unknown"
	this.SpeakerGender = &speakerGender
	var addresseeGender string = "unknown"
	this.AddresseeGender = &addresseeGender
	var translationStyle string = "natural"
	this.TranslationStyle = &translationStyle
	var stream bool = false
	this.Stream = &stream
	return &this
}

// GetText returns the Text field value
func (o *TranslateRequest) GetText() TranslateRequestText {
	if o == nil {
		var ret TranslateRequestText
		return ret
	}

	return o.Text
}

// GetTextOk returns a tuple with the Text field value
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetTextOk() (*TranslateRequestText, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Text, true
}

// SetText sets field value
func (o *TranslateRequest) SetText(v TranslateRequestText) {
	o.Text = v
}

// GetSourceLang returns the SourceLang field value if set, zero value otherwise.
func (o *TranslateRequest) GetSourceLang() string {
	if o == nil || IsNil(o.SourceLang) {
		var ret string
		return ret
	}
	return *o.SourceLang
}

// GetSourceLangOk returns a tuple with the SourceLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetSourceLangOk() (*string, bool) {
	if o == nil || IsNil(o.SourceLang) {
		return nil, false
	}
	return o.SourceLang, true
}

// HasSourceLang returns a boolean if a field has been set.
func (o *TranslateRequest) HasSourceLang() bool {
	if o != nil && !IsNil(o.SourceLang) {
		return true
	}

	return false
}

// SetSourceLang gets a reference to the given string and assigns it to the SourceLang field.
func (o *TranslateRequest) SetSourceLang(v string) {
	o.SourceLang = &v
}

// GetTargetLang returns the TargetLang field value if set, zero value otherwise.
func (o *TranslateRequest) GetTargetLang() string {
	if o == nil || IsNil(o.TargetLang) {
		var ret string
		return ret
	}
	return *o.TargetLang
}

// GetTargetLangOk returns a tuple with the TargetLang field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetTargetLangOk() (*string, bool) {
	if o == nil || IsNil(o.TargetLang) {
		return nil, false
	}
	return o.TargetLang, true
}

// HasTargetLang returns a boolean if a field has been set.
func (o *TranslateRequest) HasTargetLang() bool {
	if o != nil && !IsNil(o.TargetLang) {
		return true
	}

	return false
}

// SetTargetLang gets a reference to the given string and assigns it to the TargetLang field.
func (o *TranslateRequest) SetTargetLang(v string) {
	o.TargetLang = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
// Deprecated
func (o *TranslateRequest) GetFrom() string {
	if o == nil || IsNil(o.From) {
		var ret string
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TranslateRequest) GetFromOk() (*string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *TranslateRequest) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given string and assigns it to the From field.
// Deprecated
func (o *TranslateRequest) SetFrom(v string) {
	o.From = &v
}

// GetTo returns the To field value if set, zero value otherwise.
// Deprecated
func (o *TranslateRequest) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *TranslateRequest) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *TranslateRequest) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
// Deprecated
func (o *TranslateRequest) SetTo(v string) {
	o.To = &v
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TranslateRequest) GetContext() string {
	if o == nil || IsNil(o.Context) {
		var ret string
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetContextOk() (*string, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TranslateRequest) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given string and assigns it to the Context field.
func (o *TranslateRequest) SetContext(v string) {
	o.Context = &v
}

// GetPreserveFormatting returns the PreserveFormatting field value if set, zero value otherwise.
func (o *TranslateRequest) GetPreserveFormatting() bool {
	if o == nil || IsNil(o.PreserveFormatting) {
		var ret bool
		return ret
	}
	return *o.PreserveFormatting
}

// GetPreserveFormattingOk returns a tuple with the PreserveFormatting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetPreserveFormattingOk() (*bool, bool) {
	if o == nil || IsNil(o.PreserveFormatting) {
		return nil, false
	}
	return o.PreserveFormatting, true
}

// HasPreserveFormatting returns a boolean if a field has been set.
func (o *TranslateRequest) HasPreserveFormatting() bool {
	if o != nil && !IsNil(o.PreserveFormatting) {
		return true
	}

	return false
}

// SetPreserveFormatting gets a reference to the given bool and assigns it to the PreserveFormatting field.
func (o *TranslateRequest) SetPreserveFormatting(v bool) {
	o.PreserveFormatting = &v
}

// GetFormality returns the Formality field value if set, zero value otherwise.
func (o *TranslateRequest) GetFormality() string {
	if o == nil || IsNil(o.Formality) {
		var ret string
		return ret
	}
	return *o.Formality
}

// GetFormalityOk returns a tuple with the Formality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetFormalityOk() (*string, bool) {
	if o == nil || IsNil(o.Formality) {
		return nil, false
	}
	return o.Formality, true
}

// HasFormality returns a boolean if a field has been set.
func (o *TranslateRequest) HasFormality() bool {
	if o != nil && !IsNil(o.Formality) {
		return true
	}

	return false
}

// SetFormality gets a reference to the given string and assigns it to the Formality field.
func (o *TranslateRequest) SetFormality(v string) {
	o.Formality = &v
}

// GetSpeakerGender returns the SpeakerGender field value if set, zero value otherwise.
func (o *TranslateRequest) GetSpeakerGender() string {
	if o == nil || IsNil(o.SpeakerGender) {
		var ret string
		return ret
	}
	return *o.SpeakerGender
}

// GetSpeakerGenderOk returns a tuple with the SpeakerGender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetSpeakerGenderOk() (*string, bool) {
	if o == nil || IsNil(o.SpeakerGender) {
		return nil, false
	}
	return o.SpeakerGender, true
}

// HasSpeakerGender returns a boolean if a field has been set.
func (o *TranslateRequest) HasSpeakerGender() bool {
	if o != nil && !IsNil(o.SpeakerGender) {
		return true
	}

	return false
}

// SetSpeakerGender gets a reference to the given string and assigns it to the SpeakerGender field.
func (o *TranslateRequest) SetSpeakerGender(v string) {
	o.SpeakerGender = &v
}

// GetAddresseeGender returns the AddresseeGender field value if set, zero value otherwise.
func (o *TranslateRequest) GetAddresseeGender() string {
	if o == nil || IsNil(o.AddresseeGender) {
		var ret string
		return ret
	}
	return *o.AddresseeGender
}

// GetAddresseeGenderOk returns a tuple with the AddresseeGender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetAddresseeGenderOk() (*string, bool) {
	if o == nil || IsNil(o.AddresseeGender) {
		return nil, false
	}
	return o.AddresseeGender, true
}

// HasAddresseeGender returns a boolean if a field has been set.
func (o *TranslateRequest) HasAddresseeGender() bool {
	if o != nil && !IsNil(o.AddresseeGender) {
		return true
	}

	return false
}

// SetAddresseeGender gets a reference to the given string and assigns it to the AddresseeGender field.
func (o *TranslateRequest) SetAddresseeGender(v string) {
	o.AddresseeGender = &v
}

// GetTranslationStyle returns the TranslationStyle field value if set, zero value otherwise.
func (o *TranslateRequest) GetTranslationStyle() string {
	if o == nil || IsNil(o.TranslationStyle) {
		var ret string
		return ret
	}
	return *o.TranslationStyle
}

// GetTranslationStyleOk returns a tuple with the TranslationStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetTranslationStyleOk() (*string, bool) {
	if o == nil || IsNil(o.TranslationStyle) {
		return nil, false
	}
	return o.TranslationStyle, true
}

// HasTranslationStyle returns a boolean if a field has been set.
func (o *TranslateRequest) HasTranslationStyle() bool {
	if o != nil && !IsNil(o.TranslationStyle) {
		return true
	}

	return false
}

// SetTranslationStyle gets a reference to the given string and assigns it to the TranslationStyle field.
func (o *TranslateRequest) SetTranslationStyle(v string) {
	o.TranslationStyle = &v
}

// GetPredictedLanguage returns the PredictedLanguage field value if set, zero value otherwise.
func (o *TranslateRequest) GetPredictedLanguage() string {
	if o == nil || IsNil(o.PredictedLanguage) {
		var ret string
		return ret
	}
	return *o.PredictedLanguage
}

// GetPredictedLanguageOk returns a tuple with the PredictedLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetPredictedLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.PredictedLanguage) {
		return nil, false
	}
	return o.PredictedLanguage, true
}

// HasPredictedLanguage returns a boolean if a field has been set.
func (o *TranslateRequest) HasPredictedLanguage() bool {
	if o != nil && !IsNil(o.PredictedLanguage) {
		return true
	}

	return false
}

// SetPredictedLanguage gets a reference to the given string and assigns it to the PredictedLanguage field.
func (o *TranslateRequest) SetPredictedLanguage(v string) {
	o.PredictedLanguage = &v
}

// GetPrediction returns the Prediction field value if set, zero value otherwise.
func (o *TranslateRequest) GetPrediction() string {
	if o == nil || IsNil(o.Prediction) {
		var ret string
		return ret
	}
	return *o.Prediction
}

// GetPredictionOk returns a tuple with the Prediction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetPredictionOk() (*string, bool) {
	if o == nil || IsNil(o.Prediction) {
		return nil, false
	}
	return o.Prediction, true
}

// HasPrediction returns a boolean if a field has been set.
func (o *TranslateRequest) HasPrediction() bool {
	if o != nil && !IsNil(o.Prediction) {
		return true
	}

	return false
}

// SetPrediction gets a reference to the given string and assigns it to the Prediction field.
func (o *TranslateRequest) SetPrediction(v string) {
	o.Prediction = &v
}

// GetStream returns the Stream field value if set, zero value otherwise.
func (o *TranslateRequest) GetStream() bool {
	if o == nil || IsNil(o.Stream) {
		var ret bool
		return ret
	}
	return *o.Stream
}

// GetStreamOk returns a tuple with the Stream field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetStreamOk() (*bool, bool) {
	if o == nil || IsNil(o.Stream) {
		return nil, false
	}
	return o.Stream, true
}

// HasStream returns a boolean if a field has been set.
func (o *TranslateRequest) HasStream() bool {
	if o != nil && !IsNil(o.Stream) {
		return true
	}

	return false
}

// SetStream gets a reference to the given bool and assigns it to the Stream field.
func (o *TranslateRequest) SetStream(v bool) {
	o.Stream = &v
}

// GetDictionaryLanguage returns the DictionaryLanguage field value if set, zero value otherwise.
func (o *TranslateRequest) GetDictionaryLanguage() string {
	if o == nil || IsNil(o.DictionaryLanguage) {
		var ret string
		return ret
	}
	return *o.DictionaryLanguage
}

// GetDictionaryLanguageOk returns a tuple with the DictionaryLanguage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateRequest) GetDictionaryLanguageOk() (*string, bool) {
	if o == nil || IsNil(o.DictionaryLanguage) {
		return nil, false
	}
	return o.DictionaryLanguage, true
}

// HasDictionaryLanguage returns a boolean if a field has been set.
func (o *TranslateRequest) HasDictionaryLanguage() bool {
	if o != nil && !IsNil(o.DictionaryLanguage) {
		return true
	}

	return false
}

// SetDictionaryLanguage gets a reference to the given string and assigns it to the DictionaryLanguage field.
func (o *TranslateRequest) SetDictionaryLanguage(v string) {
	o.DictionaryLanguage = &v
}

func (o TranslateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["text"] = o.Text
	if !IsNil(o.SourceLang) {
		toSerialize["source_lang"] = o.SourceLang
	}
	if !IsNil(o.TargetLang) {
		toSerialize["target_lang"] = o.TargetLang
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Context) {
		toSerialize["context"] = o.Context
	}
	if !IsNil(o.PreserveFormatting) {
		toSerialize["preserve_formatting"] = o.PreserveFormatting
	}
	if !IsNil(o.Formality) {
		toSerialize["formality"] = o.Formality
	}
	if !IsNil(o.SpeakerGender) {
		toSerialize["speaker_gender"] = o.SpeakerGender
	}
	if !IsNil(o.AddresseeGender) {
		toSerialize["addressee_gender"] = o.AddresseeGender
	}
	if !IsNil(o.TranslationStyle) {
		toSerialize["translation_style"] = o.TranslationStyle
	}
	if !IsNil(o.PredictedLanguage) {
		toSerialize["predicted_language"] = o.PredictedLanguage
	}
	if !IsNil(o.Prediction) {
		toSerialize["prediction"] = o.Prediction
	}
	if !IsNil(o.Stream) {
		toSerialize["stream"] = o.Stream
	}
	if !IsNil(o.DictionaryLanguage) {
		toSerialize["dictionary_language"] = o.DictionaryLanguage
	}
	return toSerialize, nil
}

func (o *TranslateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"text",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTranslateRequest := _TranslateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTranslateRequest)

	if err != nil {
		return err
	}

	*o = TranslateRequest(varTranslateRequest)

	return err
}

type NullableTranslateRequest struct {
	value *TranslateRequest
	isSet bool
}

func (v NullableTranslateRequest) Get() *TranslateRequest {
	return v.value
}

func (v *NullableTranslateRequest) Set(val *TranslateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateRequest(val *TranslateRequest) *NullableTranslateRequest {
	return &NullableTranslateRequest{value: val, isSet: true}
}

func (v NullableTranslateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


