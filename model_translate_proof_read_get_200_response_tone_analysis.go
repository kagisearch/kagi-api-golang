/*
Kagi API

The search API provides programmatic access to data that powers our search results & more. Kagi APIs  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  Quick start for all APIs:  - Get the API key (requires a Kagi account). - Top off your API credits. - Call the API.  ### Free  - Kagi Small Web RSS feed (public)  ### Unofficial Client Libraries  Libraries created by Kagi users and third parties.  - kagigo for Go - FastGPT & Universal Summarizer - kagi-api for Rust - kagi-dotnet for C#/.NET  ### Beta Status  The API is currently in a \"v0\" beta status. Changes will be ongoing, and will be added to the documentation below as features become available.  Use at your own risk, but please reach out to us if you have any questions.  See the Support and Community section for details. ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - Bug Reports - Q&A Forum - API Feature Requests  ### Discord Join our Discord! Good for quick questions, chatting about thing you've made with our APIs! 

API version: 0.0.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TranslateProofReadGet200ResponseToneAnalysis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TranslateProofReadGet200ResponseToneAnalysis{}

// TranslateProofReadGet200ResponseToneAnalysis Analysis of the text's tone
type TranslateProofReadGet200ResponseToneAnalysis struct {
	// The primary tone of the text (formal, informal, neutral, friendly, academic, professional, casual, etc.)
	OverallTone *string `json:"overall_tone,omitempty"`
	// Brief description of the tone of the text
	Description *string `json:"description,omitempty"`
	// Optional suggestions for tone adjustment if needed
	Suggestions NullableString `json:"suggestions,omitempty"`
}

// NewTranslateProofReadGet200ResponseToneAnalysis instantiates a new TranslateProofReadGet200ResponseToneAnalysis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTranslateProofReadGet200ResponseToneAnalysis() *TranslateProofReadGet200ResponseToneAnalysis {
	this := TranslateProofReadGet200ResponseToneAnalysis{}
	return &this
}

// NewTranslateProofReadGet200ResponseToneAnalysisWithDefaults instantiates a new TranslateProofReadGet200ResponseToneAnalysis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTranslateProofReadGet200ResponseToneAnalysisWithDefaults() *TranslateProofReadGet200ResponseToneAnalysis {
	this := TranslateProofReadGet200ResponseToneAnalysis{}
	return &this
}

// GetOverallTone returns the OverallTone field value if set, zero value otherwise.
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetOverallTone() string {
	if o == nil || IsNil(o.OverallTone) {
		var ret string
		return ret
	}
	return *o.OverallTone
}

// GetOverallToneOk returns a tuple with the OverallTone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetOverallToneOk() (*string, bool) {
	if o == nil || IsNil(o.OverallTone) {
		return nil, false
	}
	return o.OverallTone, true
}

// HasOverallTone returns a boolean if a field has been set.
func (o *TranslateProofReadGet200ResponseToneAnalysis) HasOverallTone() bool {
	if o != nil && !IsNil(o.OverallTone) {
		return true
	}

	return false
}

// SetOverallTone gets a reference to the given string and assigns it to the OverallTone field.
func (o *TranslateProofReadGet200ResponseToneAnalysis) SetOverallTone(v string) {
	o.OverallTone = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *TranslateProofReadGet200ResponseToneAnalysis) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *TranslateProofReadGet200ResponseToneAnalysis) SetDescription(v string) {
	o.Description = &v
}

// GetSuggestions returns the Suggestions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetSuggestions() string {
	if o == nil || IsNil(o.Suggestions.Get()) {
		var ret string
		return ret
	}
	return *o.Suggestions.Get()
}

// GetSuggestionsOk returns a tuple with the Suggestions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TranslateProofReadGet200ResponseToneAnalysis) GetSuggestionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suggestions.Get(), o.Suggestions.IsSet()
}

// HasSuggestions returns a boolean if a field has been set.
func (o *TranslateProofReadGet200ResponseToneAnalysis) HasSuggestions() bool {
	if o != nil && o.Suggestions.IsSet() {
		return true
	}

	return false
}

// SetSuggestions gets a reference to the given NullableString and assigns it to the Suggestions field.
func (o *TranslateProofReadGet200ResponseToneAnalysis) SetSuggestions(v string) {
	o.Suggestions.Set(&v)
}
// SetSuggestionsNil sets the value for Suggestions to be an explicit nil
func (o *TranslateProofReadGet200ResponseToneAnalysis) SetSuggestionsNil() {
	o.Suggestions.Set(nil)
}

// UnsetSuggestions ensures that no value is present for Suggestions, not even an explicit nil
func (o *TranslateProofReadGet200ResponseToneAnalysis) UnsetSuggestions() {
	o.Suggestions.Unset()
}

func (o TranslateProofReadGet200ResponseToneAnalysis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TranslateProofReadGet200ResponseToneAnalysis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OverallTone) {
		toSerialize["overall_tone"] = o.OverallTone
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Suggestions.IsSet() {
		toSerialize["suggestions"] = o.Suggestions.Get()
	}
	return toSerialize, nil
}

type NullableTranslateProofReadGet200ResponseToneAnalysis struct {
	value *TranslateProofReadGet200ResponseToneAnalysis
	isSet bool
}

func (v NullableTranslateProofReadGet200ResponseToneAnalysis) Get() *TranslateProofReadGet200ResponseToneAnalysis {
	return v.value
}

func (v *NullableTranslateProofReadGet200ResponseToneAnalysis) Set(val *TranslateProofReadGet200ResponseToneAnalysis) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslateProofReadGet200ResponseToneAnalysis) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslateProofReadGet200ResponseToneAnalysis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslateProofReadGet200ResponseToneAnalysis(val *TranslateProofReadGet200ResponseToneAnalysis) *NullableTranslateProofReadGet200ResponseToneAnalysis {
	return &NullableTranslateProofReadGet200ResponseToneAnalysis{value: val, isSet: true}
}

func (v NullableTranslateProofReadGet200ResponseToneAnalysis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslateProofReadGet200ResponseToneAnalysis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


