/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// Translate200Response - struct for Translate200Response
type Translate200Response struct {
	Translate200ResponseOneOf *Translate200ResponseOneOf
	Translate200ResponseOneOf1 *Translate200ResponseOneOf1
}

// Translate200ResponseOneOfAsTranslate200Response is a convenience function that returns Translate200ResponseOneOf wrapped in Translate200Response
func Translate200ResponseOneOfAsTranslate200Response(v *Translate200ResponseOneOf) Translate200Response {
	return Translate200Response{
		Translate200ResponseOneOf: v,
	}
}

// Translate200ResponseOneOf1AsTranslate200Response is a convenience function that returns Translate200ResponseOneOf1 wrapped in Translate200Response
func Translate200ResponseOneOf1AsTranslate200Response(v *Translate200ResponseOneOf1) Translate200Response {
	return Translate200Response{
		Translate200ResponseOneOf1: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *Translate200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into Translate200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.Translate200ResponseOneOf)
	if err == nil {
		jsonTranslate200ResponseOneOf, _ := json.Marshal(dst.Translate200ResponseOneOf)
		if string(jsonTranslate200ResponseOneOf) == "{}" { // empty struct
			dst.Translate200ResponseOneOf = nil
		} else {
			if err = validator.Validate(dst.Translate200ResponseOneOf); err != nil {
				dst.Translate200ResponseOneOf = nil
			} else {
				match++
			}
		}
	} else {
		dst.Translate200ResponseOneOf = nil
	}

	// try to unmarshal data into Translate200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.Translate200ResponseOneOf1)
	if err == nil {
		jsonTranslate200ResponseOneOf1, _ := json.Marshal(dst.Translate200ResponseOneOf1)
		if string(jsonTranslate200ResponseOneOf1) == "{}" { // empty struct
			dst.Translate200ResponseOneOf1 = nil
		} else {
			if err = validator.Validate(dst.Translate200ResponseOneOf1); err != nil {
				dst.Translate200ResponseOneOf1 = nil
			} else {
				match++
			}
		}
	} else {
		dst.Translate200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.Translate200ResponseOneOf = nil
		dst.Translate200ResponseOneOf1 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(Translate200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(Translate200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src Translate200Response) MarshalJSON() ([]byte, error) {
	if src.Translate200ResponseOneOf != nil {
		return json.Marshal(&src.Translate200ResponseOneOf)
	}

	if src.Translate200ResponseOneOf1 != nil {
		return json.Marshal(&src.Translate200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *Translate200Response) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.Translate200ResponseOneOf != nil {
		return obj.Translate200ResponseOneOf
	}

	if obj.Translate200ResponseOneOf1 != nil {
		return obj.Translate200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj Translate200Response) GetActualInstanceValue() (interface{}) {
	if obj.Translate200ResponseOneOf != nil {
		return *obj.Translate200ResponseOneOf
	}

	if obj.Translate200ResponseOneOf1 != nil {
		return *obj.Translate200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableTranslate200Response struct {
	value *Translate200Response
	isSet bool
}

func (v NullableTranslate200Response) Get() *Translate200Response {
	return v.value
}

func (v *NullableTranslate200Response) Set(val *Translate200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTranslate200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTranslate200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTranslate200Response(val *Translate200Response) *NullableTranslate200Response {
	return &NullableTranslate200Response{value: val, isSet: true}
}

func (v NullableTranslate200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTranslate200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


