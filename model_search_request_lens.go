/*
Kagi API

The Kagi API provides programmatic access to data that powers our search results & more.   Quick start for all APIs:  - Create an account at [Kagi](https://kagi.com/signup) - Generate an [API key](https://kagi.com/settings?p=api) - Call the API  We have the following APIs available. ### Commercial  - Kagi Search API (invite only at the moment) - Web and News Enrichment API (public, exposes Kagi's own indexes Teclis and TinyGem) - Universal Summarizer API (public) - FastGPT API (public)  ### Free  - Kagi Small Web RSS feed (public)  ### Official Client Libraries  We offer the following libraries you can use to interact with the Kagi API. These are generated from an OpenAPI spec. If you have a language you would like to use and it's not in the list, send us a message and we will add it to the list if it is supported. Or you can use the [spec](https://wild-wombat.redocly.app/_spec/openapi.yaml?download) to build your own custom library.  - [Golang](https://github.com/kagisearch/kagi-api-golang) - [Python](https://github.com/kagisearch/kagi-api-python) - [Rust](https://github.com/kagisearch/kagi-api-rust)  ### Unofficial Client Libraries  There also exist third party libraries for interacting with the Kagi API.  - [kagigo for Go](https://github.com/httpjamesm/kagigo) - FastGPT & Universal Summarizer - [kagi-api](https://crates.io/crates/kagi-api) for Rust - [kagi-api](https://alchemists.io/projects/kagi-api) for Ruby - [kagi-dotnet](https://github.com/patchoulish/kagi-dotnet) for C#/.NET  ### API Status  Our existing API, the \"v0\" beta API, is being replaced with a new version that will be available publicly soon. As changes are made, we will be updating the documentation below when the new features become available.  See the [Support and Community](https://help.kagi.com/kagi/support-and-community/) section for details. ### Pricing  We are in the process of moving all APIs to a post-paid tiered system, where each tier has a limit on the number of requests that can be made. If an API has a pricing section, then it is still being migrated over to the new billing system.  ### GitHub Discussions  This is the preferred venue for bug reports and feature requests.  - [Bug Reports](https://github.com/kagisearch/kagi-docs/issues/new/choose) - [Q&A Forum](https://github.com/kagisearch/kagi-docs/discussions/categories/q-a?discussions_q=category%3AQ%26A+label%3Aproduct%3Akagi_search_api) - [API Feature Requests](https://github.com/kagisearch/kagi-docs/discussions/categories/kagi-search-api-feature-requests-ideas)  ### Discord Join our [Discord](https://kagi.com/discord)! Good for quick questions or chatting about things you've made with our APIs! 

API version: 0.1.0
Contact: support@kagi.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SearchRequestLens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchRequestLens{}

// SearchRequestLens An inline description of a lens to apply to the search. Options supplied by the lens take pecedent over those supplied by the user in their search terms (e.g., `site:` operators), allowing you to restrict the scope of the search to return more relevant results in specific applications.
type SearchRequestLens struct {
	// A list of domains to restrict the search to.
	SitesIncluded []string `json:"sites_included,omitempty"`
	// A list of domains to restrict the search to.
	SitesExcluded []string `json:"sites_excluded,omitempty"`
	// A list of keywords to filter results on, such that every result *must* contain these terms.
	KeywordsIncluded []string `json:"keywords_included,omitempty"`
	// A list of keywords to filter results on, such that any result containing these terms is removed.
	KeywordsExcluded []string `json:"keywords_excluded,omitempty"`
	// A specific file type to search for. (e.g., `pdf`)
	FileType *string `json:"file_type,omitempty"`
	// Filters for web pages that have been updated or published *after* the given date (`YYYY-MM-DD`).
	TimeAfter *string `json:"time_after,omitempty"`
	// Filters for web pages that have been updated or published *before* the given date (`YYYY-MM-DD`).
	TimeBefore *string `json:"time_before,omitempty"`
	// Filters for web pages that have been updated or published in the given interval, relative to today's date.
	TimeRelative *string `json:"time_relative,omitempty"`
	// Requests results localized to a specific region. Can be any valid [ISO-3166-1 Alpha-2 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2#Officially_assigned_code_elements), or the special value `no_region`, that will try to get the most general results possible.
	SearchRegion *string `json:"search_region,omitempty"`
}

// NewSearchRequestLens instantiates a new SearchRequestLens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchRequestLens() *SearchRequestLens {
	this := SearchRequestLens{}
	return &this
}

// NewSearchRequestLensWithDefaults instantiates a new SearchRequestLens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchRequestLensWithDefaults() *SearchRequestLens {
	this := SearchRequestLens{}
	return &this
}

// GetSitesIncluded returns the SitesIncluded field value if set, zero value otherwise.
func (o *SearchRequestLens) GetSitesIncluded() []string {
	if o == nil || IsNil(o.SitesIncluded) {
		var ret []string
		return ret
	}
	return o.SitesIncluded
}

// GetSitesIncludedOk returns a tuple with the SitesIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetSitesIncludedOk() ([]string, bool) {
	if o == nil || IsNil(o.SitesIncluded) {
		return nil, false
	}
	return o.SitesIncluded, true
}

// HasSitesIncluded returns a boolean if a field has been set.
func (o *SearchRequestLens) HasSitesIncluded() bool {
	if o != nil && !IsNil(o.SitesIncluded) {
		return true
	}

	return false
}

// SetSitesIncluded gets a reference to the given []string and assigns it to the SitesIncluded field.
func (o *SearchRequestLens) SetSitesIncluded(v []string) {
	o.SitesIncluded = v
}

// GetSitesExcluded returns the SitesExcluded field value if set, zero value otherwise.
func (o *SearchRequestLens) GetSitesExcluded() []string {
	if o == nil || IsNil(o.SitesExcluded) {
		var ret []string
		return ret
	}
	return o.SitesExcluded
}

// GetSitesExcludedOk returns a tuple with the SitesExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetSitesExcludedOk() ([]string, bool) {
	if o == nil || IsNil(o.SitesExcluded) {
		return nil, false
	}
	return o.SitesExcluded, true
}

// HasSitesExcluded returns a boolean if a field has been set.
func (o *SearchRequestLens) HasSitesExcluded() bool {
	if o != nil && !IsNil(o.SitesExcluded) {
		return true
	}

	return false
}

// SetSitesExcluded gets a reference to the given []string and assigns it to the SitesExcluded field.
func (o *SearchRequestLens) SetSitesExcluded(v []string) {
	o.SitesExcluded = v
}

// GetKeywordsIncluded returns the KeywordsIncluded field value if set, zero value otherwise.
func (o *SearchRequestLens) GetKeywordsIncluded() []string {
	if o == nil || IsNil(o.KeywordsIncluded) {
		var ret []string
		return ret
	}
	return o.KeywordsIncluded
}

// GetKeywordsIncludedOk returns a tuple with the KeywordsIncluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetKeywordsIncludedOk() ([]string, bool) {
	if o == nil || IsNil(o.KeywordsIncluded) {
		return nil, false
	}
	return o.KeywordsIncluded, true
}

// HasKeywordsIncluded returns a boolean if a field has been set.
func (o *SearchRequestLens) HasKeywordsIncluded() bool {
	if o != nil && !IsNil(o.KeywordsIncluded) {
		return true
	}

	return false
}

// SetKeywordsIncluded gets a reference to the given []string and assigns it to the KeywordsIncluded field.
func (o *SearchRequestLens) SetKeywordsIncluded(v []string) {
	o.KeywordsIncluded = v
}

// GetKeywordsExcluded returns the KeywordsExcluded field value if set, zero value otherwise.
func (o *SearchRequestLens) GetKeywordsExcluded() []string {
	if o == nil || IsNil(o.KeywordsExcluded) {
		var ret []string
		return ret
	}
	return o.KeywordsExcluded
}

// GetKeywordsExcludedOk returns a tuple with the KeywordsExcluded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetKeywordsExcludedOk() ([]string, bool) {
	if o == nil || IsNil(o.KeywordsExcluded) {
		return nil, false
	}
	return o.KeywordsExcluded, true
}

// HasKeywordsExcluded returns a boolean if a field has been set.
func (o *SearchRequestLens) HasKeywordsExcluded() bool {
	if o != nil && !IsNil(o.KeywordsExcluded) {
		return true
	}

	return false
}

// SetKeywordsExcluded gets a reference to the given []string and assigns it to the KeywordsExcluded field.
func (o *SearchRequestLens) SetKeywordsExcluded(v []string) {
	o.KeywordsExcluded = v
}

// GetFileType returns the FileType field value if set, zero value otherwise.
func (o *SearchRequestLens) GetFileType() string {
	if o == nil || IsNil(o.FileType) {
		var ret string
		return ret
	}
	return *o.FileType
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetFileTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FileType) {
		return nil, false
	}
	return o.FileType, true
}

// HasFileType returns a boolean if a field has been set.
func (o *SearchRequestLens) HasFileType() bool {
	if o != nil && !IsNil(o.FileType) {
		return true
	}

	return false
}

// SetFileType gets a reference to the given string and assigns it to the FileType field.
func (o *SearchRequestLens) SetFileType(v string) {
	o.FileType = &v
}

// GetTimeAfter returns the TimeAfter field value if set, zero value otherwise.
func (o *SearchRequestLens) GetTimeAfter() string {
	if o == nil || IsNil(o.TimeAfter) {
		var ret string
		return ret
	}
	return *o.TimeAfter
}

// GetTimeAfterOk returns a tuple with the TimeAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetTimeAfterOk() (*string, bool) {
	if o == nil || IsNil(o.TimeAfter) {
		return nil, false
	}
	return o.TimeAfter, true
}

// HasTimeAfter returns a boolean if a field has been set.
func (o *SearchRequestLens) HasTimeAfter() bool {
	if o != nil && !IsNil(o.TimeAfter) {
		return true
	}

	return false
}

// SetTimeAfter gets a reference to the given string and assigns it to the TimeAfter field.
func (o *SearchRequestLens) SetTimeAfter(v string) {
	o.TimeAfter = &v
}

// GetTimeBefore returns the TimeBefore field value if set, zero value otherwise.
func (o *SearchRequestLens) GetTimeBefore() string {
	if o == nil || IsNil(o.TimeBefore) {
		var ret string
		return ret
	}
	return *o.TimeBefore
}

// GetTimeBeforeOk returns a tuple with the TimeBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetTimeBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeBefore) {
		return nil, false
	}
	return o.TimeBefore, true
}

// HasTimeBefore returns a boolean if a field has been set.
func (o *SearchRequestLens) HasTimeBefore() bool {
	if o != nil && !IsNil(o.TimeBefore) {
		return true
	}

	return false
}

// SetTimeBefore gets a reference to the given string and assigns it to the TimeBefore field.
func (o *SearchRequestLens) SetTimeBefore(v string) {
	o.TimeBefore = &v
}

// GetTimeRelative returns the TimeRelative field value if set, zero value otherwise.
func (o *SearchRequestLens) GetTimeRelative() string {
	if o == nil || IsNil(o.TimeRelative) {
		var ret string
		return ret
	}
	return *o.TimeRelative
}

// GetTimeRelativeOk returns a tuple with the TimeRelative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetTimeRelativeOk() (*string, bool) {
	if o == nil || IsNil(o.TimeRelative) {
		return nil, false
	}
	return o.TimeRelative, true
}

// HasTimeRelative returns a boolean if a field has been set.
func (o *SearchRequestLens) HasTimeRelative() bool {
	if o != nil && !IsNil(o.TimeRelative) {
		return true
	}

	return false
}

// SetTimeRelative gets a reference to the given string and assigns it to the TimeRelative field.
func (o *SearchRequestLens) SetTimeRelative(v string) {
	o.TimeRelative = &v
}

// GetSearchRegion returns the SearchRegion field value if set, zero value otherwise.
func (o *SearchRequestLens) GetSearchRegion() string {
	if o == nil || IsNil(o.SearchRegion) {
		var ret string
		return ret
	}
	return *o.SearchRegion
}

// GetSearchRegionOk returns a tuple with the SearchRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchRequestLens) GetSearchRegionOk() (*string, bool) {
	if o == nil || IsNil(o.SearchRegion) {
		return nil, false
	}
	return o.SearchRegion, true
}

// HasSearchRegion returns a boolean if a field has been set.
func (o *SearchRequestLens) HasSearchRegion() bool {
	if o != nil && !IsNil(o.SearchRegion) {
		return true
	}

	return false
}

// SetSearchRegion gets a reference to the given string and assigns it to the SearchRegion field.
func (o *SearchRequestLens) SetSearchRegion(v string) {
	o.SearchRegion = &v
}

func (o SearchRequestLens) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchRequestLens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SitesIncluded) {
		toSerialize["sites_included"] = o.SitesIncluded
	}
	if !IsNil(o.SitesExcluded) {
		toSerialize["sites_excluded"] = o.SitesExcluded
	}
	if !IsNil(o.KeywordsIncluded) {
		toSerialize["keywords_included"] = o.KeywordsIncluded
	}
	if !IsNil(o.KeywordsExcluded) {
		toSerialize["keywords_excluded"] = o.KeywordsExcluded
	}
	if !IsNil(o.FileType) {
		toSerialize["file_type"] = o.FileType
	}
	if !IsNil(o.TimeAfter) {
		toSerialize["time_after"] = o.TimeAfter
	}
	if !IsNil(o.TimeBefore) {
		toSerialize["time_before"] = o.TimeBefore
	}
	if !IsNil(o.TimeRelative) {
		toSerialize["time_relative"] = o.TimeRelative
	}
	if !IsNil(o.SearchRegion) {
		toSerialize["search_region"] = o.SearchRegion
	}
	return toSerialize, nil
}

type NullableSearchRequestLens struct {
	value *SearchRequestLens
	isSet bool
}

func (v NullableSearchRequestLens) Get() *SearchRequestLens {
	return v.value
}

func (v *NullableSearchRequestLens) Set(val *SearchRequestLens) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchRequestLens) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchRequestLens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchRequestLens(val *SearchRequestLens) *NullableSearchRequestLens {
	return &NullableSearchRequestLens{value: val, isSet: true}
}

func (v NullableSearchRequestLens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchRequestLens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


